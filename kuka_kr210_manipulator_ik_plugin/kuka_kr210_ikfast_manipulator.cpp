/// autogenerated analytical inverse kinematics code from ikfast program part of
/// OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 61 generated on 2015-03-17 16:37:40.901192
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need
/// -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared
///     -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION == 61);

#include <algorithm>
#include <cmath>
#include <complex>
#include <limits>
#include <vector>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <iostream>
#include <sstream>
#include <stdexcept>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b)                                                       \
  {                                                                            \
    if (!(b)) {                                                                \
      std::stringstream ss;                                                    \
      ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": "        \
         << __PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed";        \
      throw std::runtime_error(ss.str());                                      \
    }                                                                          \
  }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI ((IkReal)6.28318530717959)
#define IKPI ((IkReal)3.14159265358979)
#define IKPI_2 ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
void dgetrf_(const int *m, const int *n, double *a, const int *lda, int *ipiv,
             int *info);
void zgetrf_(const int *m, const int *n, std::complex<double> *a,
             const int *lda, int *ipiv, int *info);
void dgetri_(const int *n, const double *a, const int *lda, int *ipiv,
             double *work, const int *lwork, int *info);
void dgesv_(const int *n, const int *nrhs, double *a, const int *lda, int *ipiv,
            double *b, const int *ldb, int *info);
void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a,
             const int *lda, int *ipiv, double *b, const int *ldb, int *info);
void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a,
            const int *lda, double *wr, double *wi, double *vl, const int *ldvl,
            double *vr, const int *ldvr, double *work, const int *lwork,
            int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f * f; }
inline double IKsqr(double f) { return f * f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

inline float IKasin(float f) {
  IKFAST_ASSERT(f > -1 - IKFAST_SINCOS_THRESH &&
                f < 1 + IKFAST_SINCOS_THRESH); // any more error implies
                                               // something is wrong with the
                                               // solver
  if (f <= -1)
    return float(-IKPI_2);
  else if (f >= 1)
    return float(IKPI_2);
  return asinf(f);
}
inline double IKasin(double f) {
  IKFAST_ASSERT(f > -1 - IKFAST_SINCOS_THRESH &&
                f < 1 + IKFAST_SINCOS_THRESH); // any more error implies
                                               // something is wrong with the
                                               // solver
  if (f <= -1)
    return -IKPI_2;
  else if (f >= 1)
    return IKPI_2;
  return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y) {
  while (x < 0) {
    x += y;
  }
  return fmodf(x, y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y) {
  while (x < 0) {
    x += y;
  }
  return fmod(x, y);
}

inline float IKacos(float f) {
  IKFAST_ASSERT(f > -1 - IKFAST_SINCOS_THRESH &&
                f < 1 + IKFAST_SINCOS_THRESH); // any more error implies
                                               // something is wrong with the
                                               // solver
  if (f <= -1)
    return float(IKPI);
  else if (f >= 1)
    return float(0);
  return acosf(f);
}
inline double IKacos(double f) {
  IKFAST_ASSERT(f > -1 - IKFAST_SINCOS_THRESH &&
                f < 1 + IKFAST_SINCOS_THRESH); // any more error implies
                                               // something is wrong with the
                                               // solver
  if (f <= -1)
    return IKPI;
  else if (f >= 1)
    return 0;
  return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) {
  if (f <= 0.0f)
    return 0.0f;
  return sqrtf(f);
}
inline double IKsqrt(double f) {
  if (f <= 0.0)
    return 0.0;
  return sqrt(f);
}
inline float IKatan2(float fy, float fx) {
  if (isnan(fy)) {
    IKFAST_ASSERT(
        !isnan(fx)); // if both are nan, probably wrong value will be returned
    return float(IKPI_2);
  } else if (isnan(fx)) {
    return 0;
  }
  return atan2f(fy, fx);
}
inline double IKatan2(double fy, double fx) {
  if (isnan(fy)) {
    IKFAST_ASSERT(
        !isnan(fx)); // if both are nan, probably wrong value will be returned
    return IKPI_2;
  } else if (isnan(fx)) {
    return 0;
  }
  return atan2(fy, fx);
}

inline float IKsign(float f) {
  if (f > 0) {
    return float(1);
  } else if (f < 0) {
    return float(-1);
  }
  return 0;
}

inline double IKsign(double f) {
  if (f > 0) {
    return 1.0;
  } else if (f < 0) {
    return -1.0;
  }
  return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal *j, IkReal *eetrans, IkReal *eerot) {
  IkReal x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15,
      x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30,
      x31, x32, x33, x34, x35, x36, x37, x38, x39, x40, x41, x42, x43, x44, x45,
      x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59;
  x0 = IKcos(j[0]);
  x1 = IKcos(j[1]);
  x2 = IKsin(j[2]);
  x3 = IKcos(j[2]);
  x4 = IKsin(j[1]);
  x5 = IKcos(j[4]);
  x6 = IKsin(j[4]);
  x7 = IKsin(j[3]);
  x8 = IKcos(j[3]);
  x9 = IKsin(j[0]);
  x10 = IKcos(j[5]);
  x11 = IKsin(j[5]);
  x12 = ((IkReal(1.49995000000000)) * (x9));
  x13 = ((IkReal(1.00000000000000)) * (x5));
  x14 = ((IkReal(0.000240000000000000)) * (x8));
  x15 = ((IkReal(0.230000000000000)) * (x0));
  x16 = ((IkReal(0.000100000000000000)) * (x1));
  x17 = ((IkReal(0.230000000000000)) * (x8));
  x18 = ((IkReal(1.00000000000000)) * (x9));
  x19 = ((IkReal(0.000240000000000000)) * (x5));
  x20 = ((IkReal(0.0550600000000000)) * (x3));
  x21 = ((IkReal(1.00000000000000)) * (x3));
  x22 = ((IkReal(1.49995000000000)) * (x0));
  x23 = ((IkReal(1.00000000000000)) * (x0));
  x24 = ((IkReal(0.230000000000000)) * (x9));
  x25 = ((IkReal(1.00000000000000)) * (x6));
  x26 = ((IkReal(0.000240000000000000)) * (x6));
  x27 = ((x1) * (x3));
  x28 = ((x11) * (x7));
  x29 = ((x2) * (x4));
  x30 = ((x1) * (x2));
  x31 = ((x4) * (x9));
  x32 = ((x0) * (x4));
  x33 = ((x7) * (x9));
  x34 = ((x3) * (x4));
  x35 = ((x6) * (x8));
  x36 = ((x18) * (x8));
  x37 = ((x1) * (x21));
  x38 = ((x23) * (x29));
  x39 = ((x18) * (x29));
  x40 = ((((IkReal(-1.00000000000000)) * (x37))) + (x29));
  x41 = ((((x21) * (x4))) + (((IkReal(1.00000000000000)) * (x30))));
  x42 = ((x40) * (x8));
  x43 = ((x41) * (x6));
  x44 = ((((IkReal(-1.00000000000000)) * (x0) * (x37))) + (x38));
  x45 = ((((IkReal(-1.00000000000000)) * (x18) * (x27))) + (x39));
  x46 = ((((x23) * (x30))) + (((x21) * (x32))));
  x47 = ((IkReal(-1.00000000000000)) * (x46));
  x48 = ((x18) * (((x30) + (x34))));
  x49 = ((IkReal(-1.00000000000000)) * (x48));
  x50 = ((x47) * (x8));
  x51 = ((x49) * (x8));
  x52 = ((x48) * (x7));
  x53 = ((x46) * (x7));
  x54 = ((((IkReal(-1.00000000000000)) * (x18) * (x7))) + (x50));
  x55 = ((((x0) * (x7))) + (x51));
  x56 = ((x5) * (x55));
  x57 = ((((IkReal(-1.00000000000000)) * (x25) * (x41))) +
         (((IkReal(-1.00000000000000)) * (x13) * (x42))));
  x58 = ((((IkReal(-1.00000000000000)) * (x25) * (x44))) +
         (((IkReal(-1.00000000000000)) * (x13) * (x54))));
  x59 = ((((IkReal(-1.00000000000000)) * (x25) * (x45))) +
         (((IkReal(-1.00000000000000)) * (x13) * (x55))));
  eerot[0] =
      ((((x5) *
         (((((IkReal(-1.00000000000000)) * (x38))) + (((x0) * (x27))))))) +
       (((x54) * (x6))));
  eerot[1] = ((((x11) * (x58))) +
              (((x10) * (((((IkReal(-1.00000000000000)) * (x36))) + (x53))))));
  eerot[2] = ((((x11) * (((x36) + (((IkReal(-1.00000000000000)) * (x53))))))) +
              (((x10) * (x58))));
  IkReal x60 = ((IkReal(1.00000000000000)) * (x29));
  eetrans[0] =
      ((IkReal(-0.00262000000000000)) +
       (((IkReal(0.000980000000000000)) * (x9))) + (((x22) * (x27))) +
       (((IkReal(-1.00000000000000)) * (x20) * (x32))) +
       (((x5) * (((((IkReal(-1.00000000000000)) * (x15) * (x60))) +
                  (((x15) * (x27))))))) +
       (((IkReal(-1.00000000000000)) * (x0) * (x16))) +
       (((IkReal(-0.0550600000000000)) * (x0) * (x30))) +
       (((x11) * (((((IkReal(-1.00000000000000)) * (x14) * (x9))) +
                   (((IkReal(0.000240000000000000)) * (x53))))))) +
       (((IkReal(0.352770000000000)) * (x0))) +
       (((IkReal(1.24990000000000)) * (x32))) +
       (((x6) * (((((x17) * (x47))) +
                  (((IkReal(-1.00000000000000)) * (x24) * (x7))))))) +
       (((IkReal(-1.00000000000000)) * (x22) * (x60))) +
       (((x10) *
         (((((x26) * (x44))) +
           (((x19) * (((((IkReal(-1.00000000000000)) * (x33))) + (x50))))))))));
  eerot[3] =
      ((((x5) *
         (((((IkReal(-1.00000000000000)) * (x39))) + (((x27) * (x9))))))) +
       (((x55) * (x6))));
  eerot[4] = ((((x11) * (x59))) + (((x10) * (((((x0) * (x8))) + (x52))))));
  eerot[5] = ((((x10) * (x59))) +
              (((x11) * (((((IkReal(-1.00000000000000)) * (x23) * (x8))) +
                          (((IkReal(-1.00000000000000)) * (x52))))))));
  IkReal x61 = ((IkReal(1.00000000000000)) * (x29));
  eetrans[1] =
      ((IkReal(0.000980000000000000)) +
       (((x6) * (((((x17) * (x49))) + (((x15) * (x7))))))) +
       (((x5) * (((((IkReal(-1.00000000000000)) * (x24) * (x61))) +
                  (((x24) * (x27))))))) +
       (((x10) * (((((x26) * (x45))) + (((x19) * (x55))))))) +
       (((IkReal(-0.0550600000000000)) * (x30) * (x9))) +
       (((IkReal(-1.00000000000000)) * (x20) * (x31))) +
       (((IkReal(-0.000980000000000000)) * (x0))) +
       (((IkReal(-1.00000000000000)) * (x12) * (x61))) +
       (((IkReal(-1.00000000000000)) * (x16) * (x9))) +
       (((x11) *
         (((((x0) * (x14))) + (((IkReal(0.000240000000000000)) * (x52))))))) +
       (((IkReal(0.352770000000000)) * (x9))) +
       (((IkReal(1.24990000000000)) * (x31))) + (((x12) * (x27))));
  eerot[6] =
      ((((x35) * (x40))) + (((IkReal(-1.00000000000000)) * (x41) * (x5))));
  eerot[7] =
      ((((x10) * (x7) * (((((IkReal(-1.00000000000000)) * (x29))) + (x37))))) +
       (((x11) * (x57))));
  eerot[8] = ((((x28) * (x40))) + (((x10) * (x57))));
  eetrans[2] =
      ((IkReal(0.750190000000000)) + (((IkReal(0.000100000000000000)) * (x4))) +
       (((x5) * (((((IkReal(-0.230000000000000)) * (x30))) +
                  (((IkReal(-0.230000000000000)) * (x34))))))) +
       (((IkReal(-1.49995000000000)) * (x30))) +
       (((IkReal(-1.49995000000000)) * (x34))) +
       (((IkReal(1.24990000000000)) * (x1))) +
       (((IkReal(-1.00000000000000)) * (x1) * (x20))) +
       (((x28) * (((((IkReal(0.000240000000000000)) * (x27))) +
                   (((IkReal(-0.000240000000000000)) * (x29))))))) +
       (((x35) * (((((IkReal(0.230000000000000)) * (x29))) +
                   (((IkReal(-0.230000000000000)) * (x27))))))) +
       (((x10) * (((((x26) * (x41))) + (((x14) * (x40) * (x5))))))) +
       (((IkReal(0.0550600000000000)) * (x29))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int *GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
  IkReal j0, cj0, sj0, htj0, j1, cj1, sj1, htj1, j2, cj2, sj2, htj2, j3, cj3,
      sj3, htj3, j4, cj4, sj4, htj4, j5, cj5, sj5, htj5, new_r00, r00, rxp0_0,
      new_r01, r01, rxp0_1, new_r02, r02, rxp0_2, new_r10, r10, rxp1_0, new_r11,
      r11, rxp1_1, new_r12, r12, rxp1_2, new_r20, r20, rxp2_0, new_r21, r21,
      rxp2_1, new_r22, r22, rxp2_2, new_px, px, npx, new_py, py, npy, new_pz,
      pz, npz, pp;
  unsigned char _ij0[2], _nj0, _ij1[2], _nj1, _ij2[2], _nj2, _ij3[2], _nj3,
      _ij4[2], _nj4, _ij5[2], _nj5;

  bool ComputeIk(const IkReal *eetrans, const IkReal *eerot,
                 const IkReal *pfree, IkSolutionListBase<IkReal> &solutions) {
    j0 = numeric_limits<IkReal>::quiet_NaN();
    _ij0[0] = -1;
    _ij0[1] = -1;
    _nj0 = -1;
    j1 = numeric_limits<IkReal>::quiet_NaN();
    _ij1[0] = -1;
    _ij1[1] = -1;
    _nj1 = -1;
    j2 = numeric_limits<IkReal>::quiet_NaN();
    _ij2[0] = -1;
    _ij2[1] = -1;
    _nj2 = -1;
    j3 = numeric_limits<IkReal>::quiet_NaN();
    _ij3[0] = -1;
    _ij3[1] = -1;
    _nj3 = -1;
    j4 = numeric_limits<IkReal>::quiet_NaN();
    _ij4[0] = -1;
    _ij4[1] = -1;
    _nj4 = -1;
    j5 = numeric_limits<IkReal>::quiet_NaN();
    _ij5[0] = -1;
    _ij5[1] = -1;
    _nj5 = -1;
    for (int dummyiter = 0; dummyiter < 1; ++dummyiter) {
      solutions.Clear();
      r00 = eerot[0 * 3 + 0];
      r01 = eerot[0 * 3 + 1];
      r02 = eerot[0 * 3 + 2];
      r10 = eerot[1 * 3 + 0];
      r11 = eerot[1 * 3 + 1];
      r12 = eerot[1 * 3 + 2];
      r20 = eerot[2 * 3 + 0];
      r21 = eerot[2 * 3 + 1];
      r22 = eerot[2 * 3 + 2];
      px = eetrans[0];
      py = eetrans[1];
      pz = eetrans[2];

      new_r00 = ((IkReal(-1.00000000000000)) * (r02));
      new_r01 = r01;
      new_r02 = r00;
      new_px = ((IkReal(0.00262000000000000)) +
                (((IkReal(-0.230000000000000)) * (r00))) + (px) +
                (((IkReal(0.000240000000000000)) * (r02))));
      new_r10 = ((IkReal(-1.00000000000000)) * (r12));
      new_r11 = r11;
      new_r12 = r10;
      new_py = ((IkReal(-0.000980000000000000)) +
                (((IkReal(-0.230000000000000)) * (r10))) + (py) +
                (((IkReal(0.000240000000000000)) * (r12))));
      new_r20 = ((IkReal(-1.00000000000000)) * (r22));
      new_r21 = r21;
      new_r22 = r20;
      new_pz = ((IkReal(-0.750190000000000)) + (pz) +
                (((IkReal(0.000240000000000000)) * (r22))) +
                (((IkReal(-0.230000000000000)) * (r20))));
      r00 = new_r00;
      r01 = new_r01;
      r02 = new_r02;
      r10 = new_r10;
      r11 = new_r11;
      r12 = new_r12;
      r20 = new_r20;
      r21 = new_r21;
      r22 = new_r22;
      px = new_px;
      py = new_py;
      pz = new_pz;
      pp = (((px) * (px)) + ((py) * (py)) + ((pz) * (pz)));
      npx = ((((px) * (r00))) + (((py) * (r10))) + (((pz) * (r20))));
      npy = ((((px) * (r01))) + (((py) * (r11))) + (((pz) * (r21))));
      npz = ((((px) * (r02))) + (((py) * (r12))) + (((pz) * (r22))));
      rxp0_0 =
          ((((IkReal(-1.00000000000000)) * (py) * (r20))) + (((pz) * (r10))));
      rxp0_1 =
          ((((px) * (r20))) + (((IkReal(-1.00000000000000)) * (pz) * (r00))));
      rxp0_2 =
          ((((IkReal(-1.00000000000000)) * (px) * (r10))) + (((py) * (r00))));
      rxp1_0 =
          ((((IkReal(-1.00000000000000)) * (py) * (r21))) + (((pz) * (r11))));
      rxp1_1 =
          ((((px) * (r21))) + (((IkReal(-1.00000000000000)) * (pz) * (r01))));
      rxp1_2 =
          ((((IkReal(-1.00000000000000)) * (px) * (r11))) + (((py) * (r01))));
      rxp2_0 =
          ((((IkReal(-1.00000000000000)) * (py) * (r22))) + (((pz) * (r12))));
      rxp2_1 =
          ((((px) * (r22))) + (((IkReal(-1.00000000000000)) * (pz) * (r02))));
      rxp2_2 =
          ((((IkReal(-1.00000000000000)) * (px) * (r12))) + (((py) * (r02))));
      {
        IkReal dummyeval[1];
        dummyeval[0] = (((px) * (px)) + ((py) * (py)));
        if (IKabs(dummyeval[0]) < 0.0000010000000000) {
          {
            IkReal dummyeval[1];
            dummyeval[0] = (((px) * (px)) + ((py) * (py)));
            if (IKabs(dummyeval[0]) < 0.0000010000000000) {
              continue;

            } else {
              {
                IkReal j0array[2], cj0array[2], sj0array[2];
                bool j0valid[2] = {false};
                _nj0 = 2;
                if (IKabs(((IkReal(-1.00000000000000)) * (py))) <
                        IKFAST_ATAN2_MAGTHRESH &&
                    IKabs(px) < IKFAST_ATAN2_MAGTHRESH)
                  continue;
                IkReal x62 =
                    ((IkReal(1.00000000000000)) *
                     (IKatan2(((IkReal(-1.00000000000000)) * (py)), px)));
                if (((((px) * (px)) + ((py) * (py)))) < (IkReal)-0.00001)
                  continue;
                if ((((IkReal(0.000980000000000000)) *
                      (((IKabs(IKabs(
                             IKsqrt((((px) * (px)) + ((py) * (py)))))) != 0)
                            ? ((IkReal)1 /
                               (IKabs(IKsqrt((((px) * (px)) + ((py) * (py)))))))
                            : (IkReal)1.0e30)))) < -1 - IKFAST_SINCOS_THRESH ||
                    (((IkReal(0.000980000000000000)) *
                      (((IKabs(IKabs(
                             IKsqrt((((px) * (px)) + ((py) * (py)))))) != 0)
                            ? ((IkReal)1 /
                               (IKabs(IKsqrt((((px) * (px)) + ((py) * (py)))))))
                            : (IkReal)1.0e30)))) > 1 + IKFAST_SINCOS_THRESH)
                  continue;
                IkReal x63 = IKasin(
                    ((IkReal(0.000980000000000000)) *
                     (((IKabs(IKabs(IKsqrt((((px) * (px)) + ((py) * (py)))))) !=
                        0)
                           ? ((IkReal)1 /
                              (IKabs(IKsqrt((((px) * (px)) + ((py) * (py)))))))
                           : (IkReal)1.0e30))));
                j0array[0] = ((x63) + (((IkReal(-1.00000000000000)) * (x62))));
                sj0array[0] = IKsin(j0array[0]);
                cj0array[0] = IKcos(j0array[0]);
                j0array[1] = ((IkReal(3.14159265358979)) +
                              (((IkReal(-1.00000000000000)) * (x62))) +
                              (((IkReal(-1.00000000000000)) * (x63))));
                sj0array[1] = IKsin(j0array[1]);
                cj0array[1] = IKcos(j0array[1]);
                if (j0array[0] > IKPI) {
                  j0array[0] -= IK2PI;
                } else if (j0array[0] < -IKPI) {
                  j0array[0] += IK2PI;
                }
                j0valid[0] = true;
                if (j0array[1] > IKPI) {
                  j0array[1] -= IK2PI;
                } else if (j0array[1] < -IKPI) {
                  j0array[1] += IK2PI;
                }
                j0valid[1] = true;
                for (int ij0 = 0; ij0 < 2; ++ij0) {
                  if (!j0valid[ij0]) {
                    continue;
                  }
                  _ij0[0] = ij0;
                  _ij0[1] = -1;
                  for (int iij0 = ij0 + 1; iij0 < 2; ++iij0) {
                    if (j0valid[iij0] &&
                        IKabs(cj0array[ij0] - cj0array[iij0]) <
                            IKFAST_SOLUTION_THRESH &&
                        IKabs(sj0array[ij0] - sj0array[iij0]) <
                            IKFAST_SOLUTION_THRESH) {
                      j0valid[iij0] = false;
                      _ij0[1] = iij0;
                      break;
                    }
                  }
                  j0 = j0array[ij0];
                  cj0 = cj0array[ij0];
                  sj0 = sj0array[ij0];

                  {
                    IkReal j2array[2], cj2array[2], sj2array[2];
                    bool j2valid[2] = {false};
                    _nj2 = 2;
                    if ((((IkReal(0.983631974086230)) +
                          (((IkReal(-0.266517389209847)) * (pp))) +
                          (((IkReal(0.188038678783115)) * (cj0) * (px))) +
                          (((IkReal(0.188038678783115)) * (py) * (sj0))))) <
                            -1 - IKFAST_SINCOS_THRESH ||
                        (((IkReal(0.983631974086230)) +
                          (((IkReal(-0.266517389209847)) * (pp))) +
                          (((IkReal(0.188038678783115)) * (cj0) * (px))) +
                          (((IkReal(0.188038678783115)) * (py) * (sj0))))) >
                            1 + IKFAST_SINCOS_THRESH)
                      continue;
                    IkReal x64 = IKasin(
                        ((IkReal(0.983631974086230)) +
                         (((IkReal(-0.266517389209847)) * (pp))) +
                         (((IkReal(0.188038678783115)) * (cj0) * (px))) +
                         (((IkReal(0.188038678783115)) * (py) * (sj0)))));
                    j2array[0] = ((IkReal(3.10482123119329)) +
                                  (((IkReal(-1.00000000000000)) * (x64))));
                    sj2array[0] = IKsin(j2array[0]);
                    cj2array[0] = IKcos(j2array[0]);
                    j2array[1] = ((IkReal(6.24641388478308)) + (x64));
                    sj2array[1] = IKsin(j2array[1]);
                    cj2array[1] = IKcos(j2array[1]);
                    if (j2array[0] > IKPI) {
                      j2array[0] -= IK2PI;
                    } else if (j2array[0] < -IKPI) {
                      j2array[0] += IK2PI;
                    }
                    j2valid[0] = true;
                    if (j2array[1] > IKPI) {
                      j2array[1] -= IK2PI;
                    } else if (j2array[1] < -IKPI) {
                      j2array[1] += IK2PI;
                    }
                    j2valid[1] = true;
                    for (int ij2 = 0; ij2 < 2; ++ij2) {
                      if (!j2valid[ij2]) {
                        continue;
                      }
                      _ij2[0] = ij2;
                      _ij2[1] = -1;
                      for (int iij2 = ij2 + 1; iij2 < 2; ++iij2) {
                        if (j2valid[iij2] &&
                            IKabs(cj2array[ij2] - cj2array[iij2]) <
                                IKFAST_SOLUTION_THRESH &&
                            IKabs(sj2array[ij2] - sj2array[iij2]) <
                                IKFAST_SOLUTION_THRESH) {
                          j2valid[iij2] = false;
                          _ij2[1] = iij2;
                          break;
                        }
                      }
                      j2 = j2array[ij2];
                      cj2 = cj2array[ij2];
                      sj2 = sj2array[ij2];

                      {
                        IkReal dummyeval[1];
                        IkReal gconst0;
                        IkReal x65 = ((py) * (sj0));
                        IkReal x66 = ((IkReal(1.49995000000000)) * (sj2));
                        IkReal x67 = ((cj0) * (px));
                        IkReal x68 = ((IkReal(0.0550600000000000)) * (cj2));
                        gconst0 = IKsign(
                            ((IkReal(0.440927223000000)) +
                             (((IkReal(-1.24990000000000)) * (x65))) +
                             (((IkReal(-1.24990000000000)) * (x67))) +
                             (((IkReal(0.0550600000000000)) * (pz) * (sj2))) +
                             (((x67) * (x68))) +
                             (((IkReal(-0.0194235162000000)) * (cj2))) +
                             (((IkReal(-1.49995000000000)) * (cj2) * (pz))) +
                             (((x66) * (x67))) +
                             (((IkReal(0.000100000000000000)) * (pz))) +
                             (((IkReal(-0.529137361500000)) * (sj2))) +
                             (((x65) * (x68))) + (((x65) * (x66)))));
                        IkReal x69 = ((cj0) * (px));
                        IkReal x70 = ((py) * (sj0));
                        IkReal x71 = ((IkReal(550.600000000000)) * (cj2));
                        IkReal x72 = ((IkReal(14999.5000000000)) * (sj2));
                        dummyeval[0] =
                            ((IkReal(4409.27223000000)) +
                             (((IkReal(-12499.0000000000)) * (x69))) +
                             (((IkReal(-5291.37361500000)) * (sj2))) +
                             (((IkReal(-194.235162000000)) * (cj2))) +
                             (((x69) * (x72))) + (((x69) * (x71))) + (pz) +
                             (((x70) * (x71))) + (((x70) * (x72))) +
                             (((IkReal(-14999.5000000000)) * (cj2) * (pz))) +
                             (((IkReal(-12499.0000000000)) * (x70))) +
                             (((IkReal(550.600000000000)) * (pz) * (sj2))));
                        if (IKabs(dummyeval[0]) < 0.0000010000000000) {
                          {
                            IkReal dummyeval[1];
                            IkReal gconst1;
                            IkReal x73 = ((cj0) * (px));
                            IkReal x74 = ((py) * (sj0));
                            gconst1 = IKsign(
                                ((IkReal(-0.124446672900000)) +
                                 (((IkReal(-1.00000000000000)) *
                                   ((x74) * (x74)))) +
                                 (((IkReal(-2.00000000000000)) * (x73) *
                                   (x74))) +
                                 (((IkReal(-1.00000000000000)) *
                                   ((pz) * (pz)))) +
                                 (((IkReal(-1.00000000000000)) *
                                   ((x73) * (x73)))) +
                                 (((IkReal(0.705540000000000)) * (x73))) +
                                 (((IkReal(0.705540000000000)) * (x74)))));
                            IkReal x75 = ((py) * (sj0));
                            IkReal x76 = ((cj0) * (px));
                            dummyeval[0] =
                                ((IkReal(-1.00000000000000)) +
                                 (((IkReal(-8.03557039088990)) *
                                   ((x76) * (x76)))) +
                                 (((IkReal(5.66941633358846)) * (x75))) +
                                 (((IkReal(5.66941633358846)) * (x76))) +
                                 (((IkReal(-8.03557039088990)) *
                                   ((pz) * (pz)))) +
                                 (((IkReal(-8.03557039088990)) *
                                   ((x75) * (x75)))) +
                                 (((IkReal(-16.0711407817798)) * (x75) *
                                   (x76))));
                            if (IKabs(dummyeval[0]) < 0.0000010000000000) {
                              continue;

                            } else {
                              {
                                IkReal j1array[1], cj1array[1], sj1array[1];
                                bool j1valid[1] = {false};
                                _nj1 = 1;
                                IkReal x77 = ((py) * (sj0));
                                IkReal x78 =
                                    ((IkReal(1.49995000000000)) * (pz));
                                IkReal x79 =
                                    ((IkReal(0.0550600000000000)) * (cj2));
                                IkReal x80 = ((cj0) * (px));
                                IkReal x81 =
                                    ((IkReal(0.0550600000000000)) * (sj2));
                                IkReal x82 =
                                    ((IkReal(1.49995000000000)) * (x77));
                                IkReal x83 =
                                    ((IkReal(0.0550600000000000)) * (x80));
                                if (IKabs(((gconst1) *
                                           (((IkReal(0.440927223000000)) +
                                             (((sj2) * (x82))) +
                                             (((x79) * (x80))) +
                                             (((IkReal(1.49995000000000)) *
                                               (sj2) * (x80))) +
                                             (((IkReal(-1.24990000000000)) *
                                               (x77))) +
                                             (((IkReal(-1.24990000000000)) *
                                               (x80))) +
                                             (((IkReal(-0.0194235162000000)) *
                                               (cj2))) +
                                             (((cj2) * (x78))) +
                                             (((IkReal(-0.000100000000000000)) *
                                               (pz))) +
                                             (((x77) * (x79))) +
                                             (((IkReal(-1.00000000000000)) *
                                               (pz) * (x81))) +
                                             (((IkReal(-0.529137361500000)) *
                                               (sj2))))))) <
                                        IKFAST_ATAN2_MAGTHRESH &&
                                    IKabs(((gconst1) *
                                           (((IkReal(-3.52770000000000e-5)) +
                                             (((x77) * (x81))) +
                                             (((IkReal(0.000100000000000000)) *
                                               (x80))) +
                                             (((pz) * (x79))) +
                                             (((IkReal(0.000100000000000000)) *
                                               (x77))) +
                                             (((IkReal(-1.24990000000000)) *
                                               (pz))) +
                                             (((IkReal(0.529137361500000)) *
                                               (cj2))) +
                                             (((IkReal(-1.49995000000000)) *
                                               (cj2) * (x80))) +
                                             (((sj2) * (x78))) +
                                             (((IkReal(-0.0194235162000000)) *
                                               (sj2))) +
                                             (((x80) * (x81))) +
                                             (((IkReal(-1.00000000000000)) *
                                               (cj2) * (x82))))))) <
                                        IKFAST_ATAN2_MAGTHRESH)
                                  continue;
                                j1array[0] = IKatan2(
                                    ((gconst1) *
                                     (((IkReal(0.440927223000000)) +
                                       (((sj2) * (x82))) + (((x79) * (x80))) +
                                       (((IkReal(1.49995000000000)) * (sj2) *
                                         (x80))) +
                                       (((IkReal(-1.24990000000000)) * (x77))) +
                                       (((IkReal(-1.24990000000000)) * (x80))) +
                                       (((IkReal(-0.0194235162000000)) *
                                         (cj2))) +
                                       (((cj2) * (x78))) +
                                       (((IkReal(-0.000100000000000000)) *
                                         (pz))) +
                                       (((x77) * (x79))) +
                                       (((IkReal(-1.00000000000000)) * (pz) *
                                         (x81))) +
                                       (((IkReal(-0.529137361500000)) *
                                         (sj2)))))),
                                    ((gconst1) *
                                     (((IkReal(-3.52770000000000e-5)) +
                                       (((x77) * (x81))) +
                                       (((IkReal(0.000100000000000000)) *
                                         (x80))) +
                                       (((pz) * (x79))) +
                                       (((IkReal(0.000100000000000000)) *
                                         (x77))) +
                                       (((IkReal(-1.24990000000000)) * (pz))) +
                                       (((IkReal(0.529137361500000)) * (cj2))) +
                                       (((IkReal(-1.49995000000000)) * (cj2) *
                                         (x80))) +
                                       (((sj2) * (x78))) +
                                       (((IkReal(-0.0194235162000000)) *
                                         (sj2))) +
                                       (((x80) * (x81))) +
                                       (((IkReal(-1.00000000000000)) * (cj2) *
                                         (x82)))))));
                                sj1array[0] = IKsin(j1array[0]);
                                cj1array[0] = IKcos(j1array[0]);
                                if (j1array[0] > IKPI) {
                                  j1array[0] -= IK2PI;
                                } else if (j1array[0] < -IKPI) {
                                  j1array[0] += IK2PI;
                                }
                                j1valid[0] = true;
                                for (int ij1 = 0; ij1 < 1; ++ij1) {
                                  if (!j1valid[ij1]) {
                                    continue;
                                  }
                                  _ij1[0] = ij1;
                                  _ij1[1] = -1;
                                  for (int iij1 = ij1 + 1; iij1 < 1; ++iij1) {
                                    if (j1valid[iij1] &&
                                        IKabs(cj1array[ij1] - cj1array[iij1]) <
                                            IKFAST_SOLUTION_THRESH &&
                                        IKabs(sj1array[ij1] - sj1array[iij1]) <
                                            IKFAST_SOLUTION_THRESH) {
                                      j1valid[iij1] = false;
                                      _ij1[1] = iij1;
                                      break;
                                    }
                                  }
                                  j1 = j1array[ij1];
                                  cj1 = cj1array[ij1];
                                  sj1 = sj1array[ij1];
                                  {
                                    IkReal evalcond[5];
                                    IkReal x84 = IKsin(j1);
                                    IkReal x85 = IKcos(j1);
                                    IkReal x86 =
                                        ((IkReal(1.49995000000000)) * (sj2));
                                    IkReal x87 = ((cj0) * (px));
                                    IkReal x88 =
                                        ((IkReal(0.0550600000000000)) * (cj2));
                                    IkReal x89 =
                                        ((IkReal(1.49995000000000)) * (cj2));
                                    IkReal x90 = ((py) * (sj0));
                                    IkReal x91 =
                                        ((IkReal(0.0550600000000000)) * (sj2));
                                    IkReal x92 =
                                        ((IkReal(1.00000000000000)) * (x85));
                                    IkReal x93 =
                                        ((IkReal(2.49980000000000)) * (x84));
                                    IkReal x94 = ((pz) * (x85));
                                    IkReal x95 = ((pz) * (x84));
                                    IkReal x96 =
                                        ((IkReal(0.000200000000000000)) *
                                         (x85));
                                    evalcond[0] =
                                        ((IkReal(-1.24990000000000)) +
                                         (((x84) * (x87))) + (x88) + (x86) +
                                         (x94) +
                                         (((IkReal(-0.352770000000000)) *
                                           (x84))) +
                                         (((x84) * (x90))));
                                    evalcond[1] =
                                        ((IkReal(-0.000100000000000000)) +
                                         (((IkReal(-1.00000000000000)) * (x90) *
                                           (x92))) +
                                         (((IkReal(-1.00000000000000)) * (x87) *
                                           (x92))) +
                                         (x89) + (x95) +
                                         (((IkReal(0.352770000000000)) *
                                           (x85))) +
                                         (((IkReal(-1.00000000000000)) *
                                           (x91))));
                                    evalcond[2] =
                                        ((((x84) * (x89))) + (((x85) * (x88))) +
                                         (((x85) * (x86))) +
                                         (((IkReal(-1.24990000000000)) *
                                           (x85))) +
                                         (pz) + (((IkReal(-1.00000000000000)) *
                                                  (x84) * (x91))) +
                                         (((IkReal(-0.000100000000000000)) *
                                           (x84))));
                                    evalcond[3] =
                                        ((IkReal(0.352770000000000)) +
                                         (((x85) * (x89))) +
                                         (((IkReal(1.24990000000000)) *
                                           (x84))) +
                                         (((IkReal(-1.00000000000000)) *
                                           (x87))) +
                                         (((IkReal(-1.00000000000000)) * (x84) *
                                           (x86))) +
                                         (((IkReal(-1.00000000000000)) * (x84) *
                                           (x88))) +
                                         (((IkReal(-1.00000000000000)) *
                                           (x90))) +
                                         (((IkReal(-0.000100000000000000)) *
                                           (x85))) +
                                         (((IkReal(-1.00000000000000)) * (x85) *
                                           (x91))));
                                    evalcond[4] =
                                        ((IkReal(0.566185873600000)) +
                                         (((x87) * (x93))) +
                                         (((IkReal(-0.881854446000000)) *
                                           (x84))) +
                                         (((IkReal(-1.00000000000000)) * (x90) *
                                           (x96))) +
                                         (((IkReal(-1.00000000000000)) * (x87) *
                                           (x96))) +
                                         (((IkReal(-1.00000000000000)) *
                                           (pp))) +
                                         (((IkReal(7.05540000000000e-5)) *
                                           (x85))) +
                                         (((x90) * (x93))) +
                                         (((IkReal(2.49980000000000)) *
                                           (x94))) +
                                         (((IkReal(0.705540000000000)) *
                                           (x90))) +
                                         (((IkReal(0.000200000000000000)) *
                                           (x95))) +
                                         (((IkReal(0.705540000000000)) *
                                           (x87))));
                                    if (IKabs(evalcond[0]) > 0.000001 ||
                                        IKabs(evalcond[1]) > 0.000001 ||
                                        IKabs(evalcond[2]) > 0.000001 ||
                                        IKabs(evalcond[3]) > 0.000001 ||
                                        IKabs(evalcond[4]) > 0.000001) {
                                      continue;
                                    }
                                  }

                                  rotationfunction0(solutions);
                                }
                              }
                            }
                          }

                        } else {
                          {
                            IkReal j1array[1], cj1array[1], sj1array[1];
                            bool j1valid[1] = {false};
                            _nj1 = 1;
                            IkReal x236 = (cj2) * (cj2);
                            IkReal x237 = (sj2) * (sj2);
                            IkReal x238 = ((cj2) * (sj2));
                            IkReal x239 = ((IkReal(1.00000000000000)) * (pz));
                            if (IKabs((
                                    (gconst0) *
                                    (((IkReal(-1.56225001000000)) +
                                      (((IkReal(3.74957501000000)) * (sj2))) +
                                      (((IkReal(-0.00303160360000000)) *
                                        (x236))) +
                                      ((pz) * (pz)) +
                                      (((IkReal(0.137638988000000)) * (cj2))) +
                                      (((IkReal(-0.165174494000000)) *
                                        (x238))) +
                                      (((IkReal(-2.24985000250000)) *
                                        (x237))))))) < IKFAST_ATAN2_MAGTHRESH &&
                                IKabs((
                                    (gconst0) *
                                    (((IkReal(0.000124990000000000)) +
                                      (((IkReal(-1.00000000000000)) * (py) *
                                        (sj0) * (x239))) +
                                      (((IkReal(-1.87479301100000)) * (cj2))) +
                                      (((IkReal(0.352770000000000)) * (pz))) +
                                      (((IkReal(-0.0825872470000000)) *
                                        (x237))) +
                                      (((IkReal(2.24681839890000)) * (x238))) +
                                      (((IkReal(-1.00000000000000)) * (cj0) *
                                        (px) * (x239))) +
                                      (((IkReal(0.0686694990000000)) * (sj2))) +
                                      (((IkReal(0.0825872470000000)) *
                                        (x236))))))) < IKFAST_ATAN2_MAGTHRESH)
                              continue;
                            j1array[0] = IKatan2(
                                ((gconst0) *
                                 (((IkReal(-1.56225001000000)) +
                                   (((IkReal(3.74957501000000)) * (sj2))) +
                                   (((IkReal(-0.00303160360000000)) * (x236))) +
                                   ((pz) * (pz)) +
                                   (((IkReal(0.137638988000000)) * (cj2))) +
                                   (((IkReal(-0.165174494000000)) * (x238))) +
                                   (((IkReal(-2.24985000250000)) * (x237)))))),
                                ((gconst0) *
                                 (((IkReal(0.000124990000000000)) +
                                   (((IkReal(-1.00000000000000)) * (py) *
                                     (sj0) * (x239))) +
                                   (((IkReal(-1.87479301100000)) * (cj2))) +
                                   (((IkReal(0.352770000000000)) * (pz))) +
                                   (((IkReal(-0.0825872470000000)) * (x237))) +
                                   (((IkReal(2.24681839890000)) * (x238))) +
                                   (((IkReal(-1.00000000000000)) * (cj0) *
                                     (px) * (x239))) +
                                   (((IkReal(0.0686694990000000)) * (sj2))) +
                                   (((IkReal(0.0825872470000000)) *
                                     (x236)))))));
                            sj1array[0] = IKsin(j1array[0]);
                            cj1array[0] = IKcos(j1array[0]);
                            if (j1array[0] > IKPI) {
                              j1array[0] -= IK2PI;
                            } else if (j1array[0] < -IKPI) {
                              j1array[0] += IK2PI;
                            }
                            j1valid[0] = true;
                            for (int ij1 = 0; ij1 < 1; ++ij1) {
                              if (!j1valid[ij1]) {
                                continue;
                              }
                              _ij1[0] = ij1;
                              _ij1[1] = -1;
                              for (int iij1 = ij1 + 1; iij1 < 1; ++iij1) {
                                if (j1valid[iij1] &&
                                    IKabs(cj1array[ij1] - cj1array[iij1]) <
                                        IKFAST_SOLUTION_THRESH &&
                                    IKabs(sj1array[ij1] - sj1array[iij1]) <
                                        IKFAST_SOLUTION_THRESH) {
                                  j1valid[iij1] = false;
                                  _ij1[1] = iij1;
                                  break;
                                }
                              }
                              j1 = j1array[ij1];
                              cj1 = cj1array[ij1];
                              sj1 = sj1array[ij1];
                              {
                                IkReal evalcond[5];
                                IkReal x240 = IKsin(j1);
                                IkReal x241 = IKcos(j1);
                                IkReal x242 =
                                    ((IkReal(1.49995000000000)) * (sj2));
                                IkReal x243 = ((cj0) * (px));
                                IkReal x244 =
                                    ((IkReal(0.0550600000000000)) * (cj2));
                                IkReal x245 =
                                    ((IkReal(1.49995000000000)) * (cj2));
                                IkReal x246 = ((py) * (sj0));
                                IkReal x247 =
                                    ((IkReal(0.0550600000000000)) * (sj2));
                                IkReal x248 =
                                    ((IkReal(1.00000000000000)) * (x241));
                                IkReal x249 =
                                    ((IkReal(2.49980000000000)) * (x240));
                                IkReal x250 = ((pz) * (x241));
                                IkReal x251 = ((pz) * (x240));
                                IkReal x252 =
                                    ((IkReal(0.000200000000000000)) * (x241));
                                evalcond[0] =
                                    ((IkReal(-1.24990000000000)) +
                                     (((x240) * (x243))) + (((x240) * (x246))) +
                                     (((IkReal(-0.352770000000000)) * (x240))) +
                                     (x250) + (x242) + (x244));
                                evalcond[1] =
                                    ((IkReal(-0.000100000000000000)) +
                                     (((IkReal(0.352770000000000)) * (x241))) +
                                     (((IkReal(-1.00000000000000)) * (x243) *
                                       (x248))) +
                                     (x251) + (x245) +
                                     (((IkReal(-1.00000000000000)) * (x247))) +
                                     (((IkReal(-1.00000000000000)) * (x246) *
                                       (x248))));
                                evalcond[2] =
                                    ((((x240) * (x245))) +
                                     (((IkReal(-1.24990000000000)) * (x241))) +
                                     (pz) + (((x241) * (x244))) +
                                     (((x241) * (x242))) +
                                     (((IkReal(-1.00000000000000)) * (x240) *
                                       (x247))) +
                                     (((IkReal(-0.000100000000000000)) *
                                       (x240))));
                                evalcond[3] =
                                    ((IkReal(0.352770000000000)) +
                                     (((IkReal(-1.00000000000000)) * (x246))) +
                                     (((IkReal(-1.00000000000000)) * (x243))) +
                                     (((IkReal(-1.00000000000000)) * (x241) *
                                       (x247))) +
                                     (((x241) * (x245))) +
                                     (((IkReal(-1.00000000000000)) * (x240) *
                                       (x242))) +
                                     (((IkReal(-1.00000000000000)) * (x240) *
                                       (x244))) +
                                     (((IkReal(1.24990000000000)) * (x240))) +
                                     (((IkReal(-0.000100000000000000)) *
                                       (x241))));
                                evalcond[4] =
                                    ((IkReal(0.566185873600000)) +
                                     (((IkReal(2.49980000000000)) * (x250))) +
                                     (((IkReal(-1.00000000000000)) * (x246) *
                                       (x252))) +
                                     (((IkReal(-1.00000000000000)) * (pp))) +
                                     (((IkReal(0.000200000000000000)) *
                                       (x251))) +
                                     (((IkReal(-0.881854446000000)) * (x240))) +
                                     (((IkReal(0.705540000000000)) * (x243))) +
                                     (((IkReal(0.705540000000000)) * (x246))) +
                                     (((x246) * (x249))) + (((x243) * (x249))) +
                                     (((IkReal(-1.00000000000000)) * (x243) *
                                       (x252))) +
                                     (((IkReal(7.05540000000000e-5)) *
                                       (x241))));
                                if (IKabs(evalcond[0]) > 0.000001 ||
                                    IKabs(evalcond[1]) > 0.000001 ||
                                    IKabs(evalcond[2]) > 0.000001 ||
                                    IKabs(evalcond[3]) > 0.000001 ||
                                    IKabs(evalcond[4]) > 0.000001) {
                                  continue;
                                }
                              }

                              rotationfunction0(solutions);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }

        } else {
          {
            IkReal j0array[2], cj0array[2], sj0array[2];
            bool j0valid[2] = {false};
            _nj0 = 2;
            if (IKabs(((IkReal(-1.00000000000000)) * (py))) <
                    IKFAST_ATAN2_MAGTHRESH &&
                IKabs(px) < IKFAST_ATAN2_MAGTHRESH)
              continue;
            IkReal x253 = ((IkReal(1.00000000000000)) *
                           (IKatan2(((IkReal(-1.00000000000000)) * (py)), px)));
            if (((((px) * (px)) + ((py) * (py)))) < (IkReal)-0.00001)
              continue;
            if ((((IkReal(0.000980000000000000)) *
                  (((IKabs(IKabs(IKsqrt((((px) * (px)) + ((py) * (py)))))) != 0)
                        ? ((IkReal)1 /
                           (IKabs(IKsqrt((((px) * (px)) + ((py) * (py)))))))
                        : (IkReal)1.0e30)))) < -1 - IKFAST_SINCOS_THRESH ||
                (((IkReal(0.000980000000000000)) *
                  (((IKabs(IKabs(IKsqrt((((px) * (px)) + ((py) * (py)))))) != 0)
                        ? ((IkReal)1 /
                           (IKabs(IKsqrt((((px) * (px)) + ((py) * (py)))))))
                        : (IkReal)1.0e30)))) > 1 + IKFAST_SINCOS_THRESH)
              continue;
            IkReal x254 = IKasin(
                ((IkReal(0.000980000000000000)) *
                 (((IKabs(IKabs(IKsqrt((((px) * (px)) + ((py) * (py)))))) != 0)
                       ? ((IkReal)1 /
                          (IKabs(IKsqrt((((px) * (px)) + ((py) * (py)))))))
                       : (IkReal)1.0e30))));
            j0array[0] = ((x254) + (((IkReal(-1.00000000000000)) * (x253))));
            sj0array[0] = IKsin(j0array[0]);
            cj0array[0] = IKcos(j0array[0]);
            j0array[1] = ((IkReal(3.14159265358979)) +
                          (((IkReal(-1.00000000000000)) * (x254))) +
                          (((IkReal(-1.00000000000000)) * (x253))));
            sj0array[1] = IKsin(j0array[1]);
            cj0array[1] = IKcos(j0array[1]);
            if (j0array[0] > IKPI) {
              j0array[0] -= IK2PI;
            } else if (j0array[0] < -IKPI) {
              j0array[0] += IK2PI;
            }
            j0valid[0] = true;
            if (j0array[1] > IKPI) {
              j0array[1] -= IK2PI;
            } else if (j0array[1] < -IKPI) {
              j0array[1] += IK2PI;
            }
            j0valid[1] = true;
            for (int ij0 = 0; ij0 < 2; ++ij0) {
              if (!j0valid[ij0]) {
                continue;
              }
              _ij0[0] = ij0;
              _ij0[1] = -1;
              for (int iij0 = ij0 + 1; iij0 < 2; ++iij0) {
                if (j0valid[iij0] &&
                    IKabs(cj0array[ij0] - cj0array[iij0]) <
                        IKFAST_SOLUTION_THRESH &&
                    IKabs(sj0array[ij0] - sj0array[iij0]) <
                        IKFAST_SOLUTION_THRESH) {
                  j0valid[iij0] = false;
                  _ij0[1] = iij0;
                  break;
                }
              }
              j0 = j0array[ij0];
              cj0 = cj0array[ij0];
              sj0 = sj0array[ij0];

              {
                IkReal j2array[2], cj2array[2], sj2array[2];
                bool j2valid[2] = {false};
                _nj2 = 2;
                if ((((IkReal(0.983631974086230)) +
                      (((IkReal(-0.266517389209847)) * (pp))) +
                      (((IkReal(0.188038678783115)) * (cj0) * (px))) +
                      (((IkReal(0.188038678783115)) * (py) * (sj0))))) <
                        -1 - IKFAST_SINCOS_THRESH ||
                    (((IkReal(0.983631974086230)) +
                      (((IkReal(-0.266517389209847)) * (pp))) +
                      (((IkReal(0.188038678783115)) * (cj0) * (px))) +
                      (((IkReal(0.188038678783115)) * (py) * (sj0))))) >
                        1 + IKFAST_SINCOS_THRESH)
                  continue;
                IkReal x255 =
                    IKasin(((IkReal(0.983631974086230)) +
                            (((IkReal(-0.266517389209847)) * (pp))) +
                            (((IkReal(0.188038678783115)) * (cj0) * (px))) +
                            (((IkReal(0.188038678783115)) * (py) * (sj0)))));
                j2array[0] = ((IkReal(3.10482123119329)) +
                              (((IkReal(-1.00000000000000)) * (x255))));
                sj2array[0] = IKsin(j2array[0]);
                cj2array[0] = IKcos(j2array[0]);
                j2array[1] = ((IkReal(6.24641388478308)) + (x255));
                sj2array[1] = IKsin(j2array[1]);
                cj2array[1] = IKcos(j2array[1]);
                if (j2array[0] > IKPI) {
                  j2array[0] -= IK2PI;
                } else if (j2array[0] < -IKPI) {
                  j2array[0] += IK2PI;
                }
                j2valid[0] = true;
                if (j2array[1] > IKPI) {
                  j2array[1] -= IK2PI;
                } else if (j2array[1] < -IKPI) {
                  j2array[1] += IK2PI;
                }
                j2valid[1] = true;
                for (int ij2 = 0; ij2 < 2; ++ij2) {
                  if (!j2valid[ij2]) {
                    continue;
                  }
                  _ij2[0] = ij2;
                  _ij2[1] = -1;
                  for (int iij2 = ij2 + 1; iij2 < 2; ++iij2) {
                    if (j2valid[iij2] &&
                        IKabs(cj2array[ij2] - cj2array[iij2]) <
                            IKFAST_SOLUTION_THRESH &&
                        IKabs(sj2array[ij2] - sj2array[iij2]) <
                            IKFAST_SOLUTION_THRESH) {
                      j2valid[iij2] = false;
                      _ij2[1] = iij2;
                      break;
                    }
                  }
                  j2 = j2array[ij2];
                  cj2 = cj2array[ij2];
                  sj2 = sj2array[ij2];

                  {
                    IkReal dummyeval[1];
                    IkReal gconst0;
                    IkReal x256 = ((py) * (sj0));
                    IkReal x257 = ((IkReal(1.49995000000000)) * (sj2));
                    IkReal x258 = ((cj0) * (px));
                    IkReal x259 = ((IkReal(0.0550600000000000)) * (cj2));
                    gconst0 = IKsign(
                        ((IkReal(0.440927223000000)) + (((x256) * (x257))) +
                         (((x256) * (x259))) + (((x257) * (x258))) +
                         (((IkReal(0.0550600000000000)) * (pz) * (sj2))) +
                         (((IkReal(-0.0194235162000000)) * (cj2))) +
                         (((IkReal(-1.49995000000000)) * (cj2) * (pz))) +
                         (((IkReal(-1.24990000000000)) * (x258))) +
                         (((IkReal(-1.24990000000000)) * (x256))) +
                         (((x258) * (x259))) +
                         (((IkReal(0.000100000000000000)) * (pz))) +
                         (((IkReal(-0.529137361500000)) * (sj2)))));
                    IkReal x260 = ((cj0) * (px));
                    IkReal x261 = ((py) * (sj0));
                    IkReal x262 = ((IkReal(550.600000000000)) * (cj2));
                    IkReal x263 = ((IkReal(14999.5000000000)) * (sj2));
                    dummyeval[0] =
                        ((IkReal(4409.27223000000)) + (((x260) * (x262))) +
                         (((x260) * (x263))) +
                         (((IkReal(-5291.37361500000)) * (sj2))) +
                         (((IkReal(-194.235162000000)) * (cj2))) +
                         (((IkReal(-12499.0000000000)) * (x261))) +
                         (((IkReal(-12499.0000000000)) * (x260))) + (pz) +
                         (((x261) * (x263))) + (((x261) * (x262))) +
                         (((IkReal(-14999.5000000000)) * (cj2) * (pz))) +
                         (((IkReal(550.600000000000)) * (pz) * (sj2))));
                    if (IKabs(dummyeval[0]) < 0.0000010000000000) {
                      {
                        IkReal dummyeval[1];
                        IkReal gconst1;
                        IkReal x264 = ((cj0) * (px));
                        IkReal x265 = ((py) * (sj0));
                        gconst1 = IKsign(
                            ((IkReal(-0.124446672900000)) +
                             (((IkReal(-1.00000000000000)) *
                               ((x264) * (x264)))) +
                             (((IkReal(-1.00000000000000)) * ((pz) * (pz)))) +
                             (((IkReal(-2.00000000000000)) * (x264) * (x265))) +
                             (((IkReal(-1.00000000000000)) *
                               ((x265) * (x265)))) +
                             (((IkReal(0.705540000000000)) * (x264))) +
                             (((IkReal(0.705540000000000)) * (x265)))));
                        IkReal x266 = ((py) * (sj0));
                        IkReal x267 = ((cj0) * (px));
                        dummyeval[0] =
                            ((IkReal(-1.00000000000000)) +
                             (((IkReal(-8.03557039088990)) *
                               ((x266) * (x266)))) +
                             (((IkReal(-16.0711407817798)) * (x266) * (x267))) +
                             (((IkReal(-8.03557039088990)) * ((pz) * (pz)))) +
                             (((IkReal(5.66941633358846)) * (x266))) +
                             (((IkReal(5.66941633358846)) * (x267))) +
                             (((IkReal(-8.03557039088990)) *
                               ((x267) * (x267)))));
                        if (IKabs(dummyeval[0]) < 0.0000010000000000) {
                          continue;

                        } else {
                          {
                            IkReal j1array[1], cj1array[1], sj1array[1];
                            bool j1valid[1] = {false};
                            _nj1 = 1;
                            IkReal x268 = ((py) * (sj0));
                            IkReal x269 = ((IkReal(1.49995000000000)) * (pz));
                            IkReal x270 =
                                ((IkReal(0.0550600000000000)) * (cj2));
                            IkReal x271 = ((cj0) * (px));
                            IkReal x272 =
                                ((IkReal(0.0550600000000000)) * (sj2));
                            IkReal x273 = ((IkReal(1.49995000000000)) * (x268));
                            IkReal x274 =
                                ((IkReal(0.0550600000000000)) * (x271));
                            if (IKabs((
                                    (gconst1) *
                                    (((IkReal(0.440927223000000)) +
                                      (((IkReal(-1.00000000000000)) * (pz) *
                                        (x272))) +
                                      (((sj2) * (x273))) + (((x270) * (x271))) +
                                      (((IkReal(-1.24990000000000)) * (x271))) +
                                      (((IkReal(-1.24990000000000)) * (x268))) +
                                      (((IkReal(1.49995000000000)) * (sj2) *
                                        (x271))) +
                                      (((IkReal(-0.0194235162000000)) *
                                        (cj2))) +
                                      (((IkReal(-0.000100000000000000)) *
                                        (pz))) +
                                      (((cj2) * (x269))) +
                                      (((IkReal(-0.529137361500000)) * (sj2))) +
                                      (((x268) * (x270))))))) <
                                    IKFAST_ATAN2_MAGTHRESH &&
                                IKabs(
                                    ((gconst1) *
                                     (((IkReal(-3.52770000000000e-5)) +
                                       (((IkReal(0.000100000000000000)) *
                                         (x268))) +
                                       (((x271) * (x272))) +
                                       (((IkReal(0.000100000000000000)) *
                                         (x271))) +
                                       (((IkReal(-1.24990000000000)) * (pz))) +
                                       (((IkReal(0.529137361500000)) * (cj2))) +
                                       (((sj2) * (x269))) +
                                       (((IkReal(-1.49995000000000)) * (cj2) *
                                         (x271))) +
                                       (((IkReal(-1.00000000000000)) * (cj2) *
                                         (x273))) +
                                       (((IkReal(-0.0194235162000000)) *
                                         (sj2))) +
                                       (((pz) * (x270))) +
                                       (((x268) * (x272))))))) <
                                    IKFAST_ATAN2_MAGTHRESH)
                              continue;
                            j1array[0] = IKatan2(
                                ((gconst1) *
                                 (((IkReal(0.440927223000000)) +
                                   (((IkReal(-1.00000000000000)) * (pz) *
                                     (x272))) +
                                   (((sj2) * (x273))) + (((x270) * (x271))) +
                                   (((IkReal(-1.24990000000000)) * (x271))) +
                                   (((IkReal(-1.24990000000000)) * (x268))) +
                                   (((IkReal(1.49995000000000)) * (sj2) *
                                     (x271))) +
                                   (((IkReal(-0.0194235162000000)) * (cj2))) +
                                   (((IkReal(-0.000100000000000000)) * (pz))) +
                                   (((cj2) * (x269))) +
                                   (((IkReal(-0.529137361500000)) * (sj2))) +
                                   (((x268) * (x270)))))),
                                ((gconst1) *
                                 (((IkReal(-3.52770000000000e-5)) +
                                   (((IkReal(0.000100000000000000)) * (x268))) +
                                   (((x271) * (x272))) +
                                   (((IkReal(0.000100000000000000)) * (x271))) +
                                   (((IkReal(-1.24990000000000)) * (pz))) +
                                   (((IkReal(0.529137361500000)) * (cj2))) +
                                   (((sj2) * (x269))) +
                                   (((IkReal(-1.49995000000000)) * (cj2) *
                                     (x271))) +
                                   (((IkReal(-1.00000000000000)) * (cj2) *
                                     (x273))) +
                                   (((IkReal(-0.0194235162000000)) * (sj2))) +
                                   (((pz) * (x270))) + (((x268) * (x272)))))));
                            sj1array[0] = IKsin(j1array[0]);
                            cj1array[0] = IKcos(j1array[0]);
                            if (j1array[0] > IKPI) {
                              j1array[0] -= IK2PI;
                            } else if (j1array[0] < -IKPI) {
                              j1array[0] += IK2PI;
                            }
                            j1valid[0] = true;
                            for (int ij1 = 0; ij1 < 1; ++ij1) {
                              if (!j1valid[ij1]) {
                                continue;
                              }
                              _ij1[0] = ij1;
                              _ij1[1] = -1;
                              for (int iij1 = ij1 + 1; iij1 < 1; ++iij1) {
                                if (j1valid[iij1] &&
                                    IKabs(cj1array[ij1] - cj1array[iij1]) <
                                        IKFAST_SOLUTION_THRESH &&
                                    IKabs(sj1array[ij1] - sj1array[iij1]) <
                                        IKFAST_SOLUTION_THRESH) {
                                  j1valid[iij1] = false;
                                  _ij1[1] = iij1;
                                  break;
                                }
                              }
                              j1 = j1array[ij1];
                              cj1 = cj1array[ij1];
                              sj1 = sj1array[ij1];
                              {
                                IkReal evalcond[5];
                                IkReal x275 = IKsin(j1);
                                IkReal x276 = IKcos(j1);
                                IkReal x277 =
                                    ((IkReal(1.49995000000000)) * (sj2));
                                IkReal x278 = ((cj0) * (px));
                                IkReal x279 =
                                    ((IkReal(0.0550600000000000)) * (cj2));
                                IkReal x280 =
                                    ((IkReal(1.49995000000000)) * (cj2));
                                IkReal x281 = ((py) * (sj0));
                                IkReal x282 =
                                    ((IkReal(0.0550600000000000)) * (sj2));
                                IkReal x283 =
                                    ((IkReal(1.00000000000000)) * (x276));
                                IkReal x284 =
                                    ((IkReal(2.49980000000000)) * (x275));
                                IkReal x285 = ((pz) * (x276));
                                IkReal x286 = ((pz) * (x275));
                                IkReal x287 =
                                    ((IkReal(0.000200000000000000)) * (x276));
                                evalcond[0] =
                                    ((IkReal(-1.24990000000000)) +
                                     (((x275) * (x278))) +
                                     (((IkReal(-0.352770000000000)) * (x275))) +
                                     (x277) + (x279) + (x285) +
                                     (((x275) * (x281))));
                                evalcond[1] =
                                    ((IkReal(-0.000100000000000000)) +
                                     (((IkReal(0.352770000000000)) * (x276))) +
                                     (((IkReal(-1.00000000000000)) * (x281) *
                                       (x283))) +
                                     (x286) + (x280) +
                                     (((IkReal(-1.00000000000000)) * (x282))) +
                                     (((IkReal(-1.00000000000000)) * (x278) *
                                       (x283))));
                                evalcond[2] =
                                    ((((IkReal(-1.24990000000000)) * (x276))) +
                                     (((x275) * (x280))) + (pz) +
                                     (((x276) * (x277))) + (((x276) * (x279))) +
                                     (((IkReal(-1.00000000000000)) * (x275) *
                                       (x282))) +
                                     (((IkReal(-0.000100000000000000)) *
                                       (x275))));
                                evalcond[3] =
                                    ((IkReal(0.352770000000000)) +
                                     (((IkReal(-1.00000000000000)) * (x278))) +
                                     (((IkReal(-1.00000000000000)) * (x276) *
                                       (x282))) +
                                     (((IkReal(-1.00000000000000)) * (x281))) +
                                     (((IkReal(1.24990000000000)) * (x275))) +
                                     (((IkReal(-1.00000000000000)) * (x275) *
                                       (x277))) +
                                     (((IkReal(-1.00000000000000)) * (x275) *
                                       (x279))) +
                                     (((x276) * (x280))) +
                                     (((IkReal(-0.000100000000000000)) *
                                       (x276))));
                                evalcond[4] =
                                    ((IkReal(0.566185873600000)) +
                                     (((x278) * (x284))) +
                                     (((IkReal(2.49980000000000)) * (x285))) +
                                     (((IkReal(-1.00000000000000)) * (x281) *
                                       (x287))) +
                                     (((IkReal(0.000200000000000000)) *
                                       (x286))) +
                                     (((IkReal(-1.00000000000000)) * (pp))) +
                                     (((IkReal(-0.881854446000000)) * (x275))) +
                                     (((IkReal(0.705540000000000)) * (x281))) +
                                     (((x281) * (x284))) +
                                     (((IkReal(0.705540000000000)) * (x278))) +
                                     (((IkReal(7.05540000000000e-5)) *
                                       (x276))) +
                                     (((IkReal(-1.00000000000000)) * (x278) *
                                       (x287))));
                                if (IKabs(evalcond[0]) > 0.000001 ||
                                    IKabs(evalcond[1]) > 0.000001 ||
                                    IKabs(evalcond[2]) > 0.000001 ||
                                    IKabs(evalcond[3]) > 0.000001 ||
                                    IKabs(evalcond[4]) > 0.000001) {
                                  continue;
                                }
                              }

                              rotationfunction0(solutions);
                            }
                          }
                        }
                      }

                    } else {
                      {
                        IkReal j1array[1], cj1array[1], sj1array[1];
                        bool j1valid[1] = {false};
                        _nj1 = 1;
                        IkReal x288 = (cj2) * (cj2);
                        IkReal x289 = (sj2) * (sj2);
                        IkReal x290 = ((cj2) * (sj2));
                        IkReal x291 = ((IkReal(1.00000000000000)) * (pz));
                        if (IKabs((
                                (gconst0) *
                                (((IkReal(-1.56225001000000)) +
                                  (((IkReal(3.74957501000000)) * (sj2))) +
                                  (((IkReal(-0.165174494000000)) * (x290))) +
                                  (((IkReal(-0.00303160360000000)) * (x288))) +
                                  ((pz) * (pz)) +
                                  (((IkReal(0.137638988000000)) * (cj2))) +
                                  (((IkReal(-2.24985000250000)) * (x289))))))) <
                                IKFAST_ATAN2_MAGTHRESH &&
                            IKabs((
                                (gconst0) *
                                (((IkReal(0.000124990000000000)) +
                                  (((IkReal(-1.00000000000000)) * (cj0) * (px) *
                                    (x291))) +
                                  (((IkReal(0.0825872470000000)) * (x288))) +
                                  (((IkReal(-1.87479301100000)) * (cj2))) +
                                  (((IkReal(0.352770000000000)) * (pz))) +
                                  (((IkReal(-0.0825872470000000)) * (x289))) +
                                  (((IkReal(-1.00000000000000)) * (py) * (sj0) *
                                    (x291))) +
                                  (((IkReal(2.24681839890000)) * (x290))) +
                                  (((IkReal(0.0686694990000000)) * (sj2))))))) <
                                IKFAST_ATAN2_MAGTHRESH)
                          continue;
                        j1array[0] = IKatan2(
                            ((gconst0) *
                             (((IkReal(-1.56225001000000)) +
                               (((IkReal(3.74957501000000)) * (sj2))) +
                               (((IkReal(-0.165174494000000)) * (x290))) +
                               (((IkReal(-0.00303160360000000)) * (x288))) +
                               ((pz) * (pz)) +
                               (((IkReal(0.137638988000000)) * (cj2))) +
                               (((IkReal(-2.24985000250000)) * (x289)))))),
                            ((gconst0) *
                             (((IkReal(0.000124990000000000)) +
                               (((IkReal(-1.00000000000000)) * (cj0) * (px) *
                                 (x291))) +
                               (((IkReal(0.0825872470000000)) * (x288))) +
                               (((IkReal(-1.87479301100000)) * (cj2))) +
                               (((IkReal(0.352770000000000)) * (pz))) +
                               (((IkReal(-0.0825872470000000)) * (x289))) +
                               (((IkReal(-1.00000000000000)) * (py) * (sj0) *
                                 (x291))) +
                               (((IkReal(2.24681839890000)) * (x290))) +
                               (((IkReal(0.0686694990000000)) * (sj2)))))));
                        sj1array[0] = IKsin(j1array[0]);
                        cj1array[0] = IKcos(j1array[0]);
                        if (j1array[0] > IKPI) {
                          j1array[0] -= IK2PI;
                        } else if (j1array[0] < -IKPI) {
                          j1array[0] += IK2PI;
                        }
                        j1valid[0] = true;
                        for (int ij1 = 0; ij1 < 1; ++ij1) {
                          if (!j1valid[ij1]) {
                            continue;
                          }
                          _ij1[0] = ij1;
                          _ij1[1] = -1;
                          for (int iij1 = ij1 + 1; iij1 < 1; ++iij1) {
                            if (j1valid[iij1] &&
                                IKabs(cj1array[ij1] - cj1array[iij1]) <
                                    IKFAST_SOLUTION_THRESH &&
                                IKabs(sj1array[ij1] - sj1array[iij1]) <
                                    IKFAST_SOLUTION_THRESH) {
                              j1valid[iij1] = false;
                              _ij1[1] = iij1;
                              break;
                            }
                          }
                          j1 = j1array[ij1];
                          cj1 = cj1array[ij1];
                          sj1 = sj1array[ij1];
                          {
                            IkReal evalcond[5];
                            IkReal x292 = IKsin(j1);
                            IkReal x293 = IKcos(j1);
                            IkReal x294 = ((IkReal(1.49995000000000)) * (sj2));
                            IkReal x295 = ((cj0) * (px));
                            IkReal x296 =
                                ((IkReal(0.0550600000000000)) * (cj2));
                            IkReal x297 = ((IkReal(1.49995000000000)) * (cj2));
                            IkReal x298 = ((py) * (sj0));
                            IkReal x299 =
                                ((IkReal(0.0550600000000000)) * (sj2));
                            IkReal x300 = ((IkReal(1.00000000000000)) * (x293));
                            IkReal x301 = ((IkReal(2.49980000000000)) * (x292));
                            IkReal x302 = ((pz) * (x293));
                            IkReal x303 = ((pz) * (x292));
                            IkReal x304 =
                                ((IkReal(0.000200000000000000)) * (x293));
                            evalcond[0] =
                                ((IkReal(-1.24990000000000)) + (x302) + (x294) +
                                 (x296) + (((x292) * (x298))) +
                                 (((x292) * (x295))) +
                                 (((IkReal(-0.352770000000000)) * (x292))));
                            evalcond[1] =
                                ((IkReal(-0.000100000000000000)) +
                                 (((IkReal(-1.00000000000000)) * (x298) *
                                   (x300))) +
                                 (((IkReal(-1.00000000000000)) * (x299))) +
                                 (((IkReal(-1.00000000000000)) * (x295) *
                                   (x300))) +
                                 (x303) + (x297) +
                                 (((IkReal(0.352770000000000)) * (x293))));
                            evalcond[2] =
                                ((((IkReal(-1.24990000000000)) * (x293))) +
                                 (pz) +
                                 (((IkReal(-0.000100000000000000)) * (x292))) +
                                 (((x293) * (x296))) + (((x293) * (x294))) +
                                 (((x292) * (x297))) +
                                 (((IkReal(-1.00000000000000)) * (x292) *
                                   (x299))));
                            evalcond[3] =
                                ((IkReal(0.352770000000000)) +
                                 (((IkReal(-1.00000000000000)) * (x295))) +
                                 (((IkReal(-1.00000000000000)) * (x298))) +
                                 (((IkReal(-1.00000000000000)) * (x293) *
                                   (x299))) +
                                 (((IkReal(1.24990000000000)) * (x292))) +
                                 (((IkReal(-0.000100000000000000)) * (x293))) +
                                 (((x293) * (x297))) +
                                 (((IkReal(-1.00000000000000)) * (x292) *
                                   (x294))) +
                                 (((IkReal(-1.00000000000000)) * (x292) *
                                   (x296))));
                            evalcond[4] =
                                ((IkReal(0.566185873600000)) +
                                 (((IkReal(-1.00000000000000)) * (x298) *
                                   (x304))) +
                                 (((IkReal(0.000200000000000000)) * (x303))) +
                                 (((IkReal(0.705540000000000)) * (x298))) +
                                 (((IkReal(0.705540000000000)) * (x295))) +
                                 (((IkReal(-1.00000000000000)) * (x295) *
                                   (x304))) +
                                 (((IkReal(-1.00000000000000)) * (pp))) +
                                 (((x298) * (x301))) +
                                 (((IkReal(7.05540000000000e-5)) * (x293))) +
                                 (((x295) * (x301))) +
                                 (((IkReal(2.49980000000000)) * (x302))) +
                                 (((IkReal(-0.881854446000000)) * (x292))));
                            if (IKabs(evalcond[0]) > 0.000001 ||
                                IKabs(evalcond[1]) > 0.000001 ||
                                IKabs(evalcond[2]) > 0.000001 ||
                                IKabs(evalcond[3]) > 0.000001 ||
                                IKabs(evalcond[4]) > 0.000001) {
                              continue;
                            }
                          }

                          rotationfunction0(solutions);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return solutions.GetNumSolutions() > 0;
  }
  inline void rotationfunction0(IkSolutionListBase<IkReal> &solutions) {
    for (int rotationiter = 0; rotationiter < 1; ++rotationiter) {
      IkReal x97 = ((cj0) * (r00));
      IkReal x98 = ((cj0) * (r01));
      IkReal x99 = ((sj1) * (sj2));
      IkReal x100 = ((IkReal(1.00000000000000)) * (sj0));
      IkReal x101 = ((r10) * (sj0));
      IkReal x102 = ((IkReal(1.00000000000000)) * (cj2));
      IkReal x103 = ((r11) * (sj0));
      IkReal x104 = ((cj0) * (r02));
      IkReal x105 = ((r12) * (sj0));
      IkReal x106 = ((((IkReal(-1.00000000000000)) * (cj1) * (x102))) + (x99));
      IkReal x107 =
          ((((IkReal(-1.00000000000000)) * (x99))) + (((cj1) * (cj2))));
      IkReal x108 = ((cj0) * (x107));
      IkReal x109 = ((((IkReal(-1.00000000000000)) * (cj1) * (sj2))) +
                     (((IkReal(-1.00000000000000)) * (sj1) * (x102))));
      IkReal x110 = ((sj0) * (x109));
      new_r00 = ((((r20) * (x106))) + (((x109) * (x97))) + (((x101) * (x109))));
      new_r01 = ((((r21) * (x106))) + (((x103) * (x109))) + (((x109) * (x98))));
      new_r02 =
          ((((r22) * (x106))) + (((x105) * (x109))) + (((x104) * (x109))));
      new_r10 = ((((IkReal(-1.00000000000000)) * (r00) * (x100))) +
                 (((cj0) * (r10))));
      new_r11 = ((((IkReal(-1.00000000000000)) * (r01) * (x100))) +
                 (((cj0) * (r11))));
      new_r12 = ((((IkReal(-1.00000000000000)) * (r02) * (x100))) +
                 (((cj0) * (r12))));
      new_r20 = ((((x107) * (x97))) + (((r20) * (x109))) + (((x101) * (x107))));
      new_r21 = ((((x107) * (x98))) + (((r21) * (x109))) + (((x103) * (x107))));
      new_r22 =
          ((((r22) * (x109))) + (((x105) * (x107))) + (((x104) * (x107))));
      {
        IkReal j4array[2], cj4array[2], sj4array[2];
        bool j4valid[2] = {false};
        _nj4 = 2;
        cj4array[0] = new_r22;
        if (cj4array[0] >= -1 - IKFAST_SINCOS_THRESH &&
            cj4array[0] <= 1 + IKFAST_SINCOS_THRESH) {
          j4valid[0] = j4valid[1] = true;
          j4array[0] = IKacos(cj4array[0]);
          sj4array[0] = IKsin(j4array[0]);
          cj4array[1] = cj4array[0];
          j4array[1] = -j4array[0];
          sj4array[1] = -sj4array[0];
        } else if (isnan(cj4array[0])) {
          // probably any value will work
          j4valid[0] = true;
          cj4array[0] = 1;
          sj4array[0] = 0;
          j4array[0] = 0;
        }
        for (int ij4 = 0; ij4 < 2; ++ij4) {
          if (!j4valid[ij4]) {
            continue;
          }
          _ij4[0] = ij4;
          _ij4[1] = -1;
          for (int iij4 = ij4 + 1; iij4 < 2; ++iij4) {
            if (j4valid[iij4] &&
                IKabs(cj4array[ij4] - cj4array[iij4]) <
                    IKFAST_SOLUTION_THRESH &&
                IKabs(sj4array[ij4] - sj4array[iij4]) <
                    IKFAST_SOLUTION_THRESH) {
              j4valid[iij4] = false;
              _ij4[1] = iij4;
              break;
            }
          }
          j4 = j4array[ij4];
          cj4 = cj4array[ij4];
          sj4 = sj4array[ij4];

          {
            IkReal dummyeval[1];
            IkReal gconst4;
            gconst4 = IKsign(sj4);
            dummyeval[0] = sj4;
            if (IKabs(dummyeval[0]) < 0.0000010000000000) {
              {
                IkReal dummyeval[1];
                IkReal gconst2;
                gconst2 =
                    IKsign((((new_r12) * (new_r12)) + ((new_r02) * (new_r02))));
                dummyeval[0] =
                    (((new_r12) * (new_r12)) + ((new_r02) * (new_r02)));
                if (IKabs(dummyeval[0]) < 0.0000010000000000) {
                  {
                    IkReal dummyeval[1];
                    IkReal gconst3;
                    gconst3 = IKsign(((((new_r10) * (new_r12) * (sj4))) +
                                      (((new_r00) * (new_r02) * (sj4)))));
                    dummyeval[0] = ((((new_r10) * (new_r12) * (sj4))) +
                                    (((new_r00) * (new_r02) * (sj4))));
                    if (IKabs(dummyeval[0]) < 0.0000010000000000) {
                      {
                        IkReal evalcond[7];
                        IkReal x111 = ((IkReal(-1.00000000000000)) + (new_r22));
                        evalcond[0] =
                            ((IkReal(-3.14159265358979)) +
                             (IKfmod(((IkReal(3.14159265358979)) + (j4)),
                                     IkReal(6.28318530717959))));
                        evalcond[1] = x111;
                        evalcond[2] = new_r20;
                        evalcond[3] = new_r21;
                        evalcond[4] = new_r20;
                        evalcond[5] = new_r21;
                        evalcond[6] = x111;
                        if (IKabs(evalcond[0]) < 0.0000010000000000 &&
                            IKabs(evalcond[1]) < 0.0000010000000000 &&
                            IKabs(evalcond[2]) < 0.0000010000000000 &&
                            IKabs(evalcond[3]) < 0.0000010000000000 &&
                            IKabs(evalcond[4]) < 0.0000010000000000 &&
                            IKabs(evalcond[5]) < 0.0000010000000000 &&
                            IKabs(evalcond[6]) < 0.0000010000000000) {
                          {
                            IkReal j3array[2], cj3array[2], sj3array[2];
                            bool j3valid[2] = {false};
                            _nj3 = 2;
                            if (IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH &&
                                IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH)
                              continue;
                            IkReal x112 = IKatan2(new_r02, new_r12);
                            j3array[0] = ((IkReal(-1.00000000000000)) * (x112));
                            sj3array[0] = IKsin(j3array[0]);
                            cj3array[0] = IKcos(j3array[0]);
                            j3array[1] =
                                ((IkReal(3.14159265358979)) +
                                 (((IkReal(-1.00000000000000)) * (x112))));
                            sj3array[1] = IKsin(j3array[1]);
                            cj3array[1] = IKcos(j3array[1]);
                            if (j3array[0] > IKPI) {
                              j3array[0] -= IK2PI;
                            } else if (j3array[0] < -IKPI) {
                              j3array[0] += IK2PI;
                            }
                            j3valid[0] = true;
                            if (j3array[1] > IKPI) {
                              j3array[1] -= IK2PI;
                            } else if (j3array[1] < -IKPI) {
                              j3array[1] += IK2PI;
                            }
                            j3valid[1] = true;
                            for (int ij3 = 0; ij3 < 2; ++ij3) {
                              if (!j3valid[ij3]) {
                                continue;
                              }
                              _ij3[0] = ij3;
                              _ij3[1] = -1;
                              for (int iij3 = ij3 + 1; iij3 < 2; ++iij3) {
                                if (j3valid[iij3] &&
                                    IKabs(cj3array[ij3] - cj3array[iij3]) <
                                        IKFAST_SOLUTION_THRESH &&
                                    IKabs(sj3array[ij3] - sj3array[iij3]) <
                                        IKFAST_SOLUTION_THRESH) {
                                  j3valid[iij3] = false;
                                  _ij3[1] = iij3;
                                  break;
                                }
                              }
                              j3 = j3array[ij3];
                              cj3 = cj3array[ij3];
                              sj3 = sj3array[ij3];
                              {
                                IkReal evalcond[1];
                                evalcond[0] = ((((IkReal(-1.00000000000000)) *
                                                 (new_r02) * (IKsin(j3)))) +
                                               (((new_r12) * (IKcos(j3)))));
                                if (IKabs(evalcond[0]) > 0.000001) {
                                  continue;
                                }
                              }

                              {
                                IkReal j5array[1], cj5array[1], sj5array[1];
                                bool j5valid[1] = {false};
                                _nj5 = 1;
                                if (IKabs(((((IkReal(-1.00000000000000)) *
                                             (cj3) * (new_r01))) +
                                           (((IkReal(-1.00000000000000)) *
                                             (new_r11) * (sj3))))) <
                                        IKFAST_ATAN2_MAGTHRESH &&
                                    IKabs(((((new_r10) * (sj3))) +
                                           (((cj3) * (new_r00))))) <
                                        IKFAST_ATAN2_MAGTHRESH &&
                                    IKabs(IKsqr(((((IkReal(-1.00000000000000)) *
                                                   (cj3) * (new_r01))) +
                                                 (((IkReal(-1.00000000000000)) *
                                                   (new_r11) * (sj3))))) +
                                          IKsqr(((((new_r10) * (sj3))) +
                                                 (((cj3) * (new_r00))))) -
                                          1) <= IKFAST_SINCOS_THRESH)
                                  continue;
                                j5array[0] =
                                    IKatan2(((((IkReal(-1.00000000000000)) *
                                               (cj3) * (new_r01))) +
                                             (((IkReal(-1.00000000000000)) *
                                               (new_r11) * (sj3)))),
                                            ((((new_r10) * (sj3))) +
                                             (((cj3) * (new_r00)))));
                                sj5array[0] = IKsin(j5array[0]);
                                cj5array[0] = IKcos(j5array[0]);
                                if (j5array[0] > IKPI) {
                                  j5array[0] -= IK2PI;
                                } else if (j5array[0] < -IKPI) {
                                  j5array[0] += IK2PI;
                                }
                                j5valid[0] = true;
                                for (int ij5 = 0; ij5 < 1; ++ij5) {
                                  if (!j5valid[ij5]) {
                                    continue;
                                  }
                                  _ij5[0] = ij5;
                                  _ij5[1] = -1;
                                  for (int iij5 = ij5 + 1; iij5 < 1; ++iij5) {
                                    if (j5valid[iij5] &&
                                        IKabs(cj5array[ij5] - cj5array[iij5]) <
                                            IKFAST_SOLUTION_THRESH &&
                                        IKabs(sj5array[ij5] - sj5array[iij5]) <
                                            IKFAST_SOLUTION_THRESH) {
                                      j5valid[iij5] = false;
                                      _ij5[1] = iij5;
                                      break;
                                    }
                                  }
                                  j5 = j5array[ij5];
                                  cj5 = cj5array[ij5];
                                  sj5 = sj5array[ij5];
                                  {
                                    IkReal evalcond[4];
                                    IkReal x113 = IKsin(j5);
                                    IkReal x114 =
                                        ((IkReal(1.00000000000000)) * (sj3));
                                    IkReal x115 = ((IkReal(1.00000000000000)) *
                                                   (IKcos(j5)));
                                    evalcond[0] =
                                        ((((IkReal(-1.00000000000000)) *
                                           (new_r00) * (x114))) +
                                         (((cj3) * (new_r10))) +
                                         (((IkReal(-1.00000000000000)) *
                                           (x113))));
                                    evalcond[1] =
                                        ((((IkReal(-1.00000000000000)) *
                                           (new_r01) * (x114))) +
                                         (((IkReal(-1.00000000000000)) *
                                           (x115))) +
                                         (((cj3) * (new_r11))));
                                    evalcond[2] =
                                        ((((new_r11) * (sj3))) + (x113) +
                                         (((cj3) * (new_r01))));
                                    evalcond[3] =
                                        ((((new_r10) * (sj3))) +
                                         (((IkReal(-1.00000000000000)) *
                                           (x115))) +
                                         (((cj3) * (new_r00))));
                                    if (IKabs(evalcond[0]) > 0.000001 ||
                                        IKabs(evalcond[1]) > 0.000001 ||
                                        IKabs(evalcond[2]) > 0.000001 ||
                                        IKabs(evalcond[3]) > 0.000001) {
                                      continue;
                                    }
                                  }

                                  {
                                    std::vector<IkSingleDOFSolutionBase<IkReal>>
                                        vinfos(6);
                                    vinfos[0].jointtype = 1;
                                    vinfos[0].foffset = j0;
                                    vinfos[0].indices[0] = _ij0[0];
                                    vinfos[0].indices[1] = _ij0[1];
                                    vinfos[0].maxsolutions = _nj0;
                                    vinfos[1].jointtype = 1;
                                    vinfos[1].foffset = j1;
                                    vinfos[1].indices[0] = _ij1[0];
                                    vinfos[1].indices[1] = _ij1[1];
                                    vinfos[1].maxsolutions = _nj1;
                                    vinfos[2].jointtype = 1;
                                    vinfos[2].foffset = j2;
                                    vinfos[2].indices[0] = _ij2[0];
                                    vinfos[2].indices[1] = _ij2[1];
                                    vinfos[2].maxsolutions = _nj2;
                                    vinfos[3].jointtype = 1;
                                    vinfos[3].foffset = j3;
                                    vinfos[3].indices[0] = _ij3[0];
                                    vinfos[3].indices[1] = _ij3[1];
                                    vinfos[3].maxsolutions = _nj3;
                                    vinfos[4].jointtype = 1;
                                    vinfos[4].foffset = j4;
                                    vinfos[4].indices[0] = _ij4[0];
                                    vinfos[4].indices[1] = _ij4[1];
                                    vinfos[4].maxsolutions = _nj4;
                                    vinfos[5].jointtype = 1;
                                    vinfos[5].foffset = j5;
                                    vinfos[5].indices[0] = _ij5[0];
                                    vinfos[5].indices[1] = _ij5[1];
                                    vinfos[5].maxsolutions = _nj5;
                                    std::vector<int> vfree(0);
                                    solutions.AddSolution(vinfos, vfree);
                                  }
                                }
                              }
                            }
                          }

                        } else {
                          evalcond[0] =
                              ((IkReal(-3.14159265358979)) +
                               (IKfmod(((IkReal(1.11022302462516e-16)) + (j4)),
                                       IkReal(6.28318530717959))));
                          evalcond[1] =
                              ((IkReal(1.00000000000000)) + (new_r22));
                          evalcond[2] = new_r20;
                          evalcond[3] = new_r21;
                          evalcond[4] =
                              ((IkReal(-1.00000000000000)) * (new_r20));
                          evalcond[5] =
                              ((IkReal(-1.00000000000000)) * (new_r21));
                          evalcond[6] =
                              ((IkReal(-1.00000000000000)) +
                               (((IkReal(-1.00000000000000)) * (new_r22))));
                          if (IKabs(evalcond[0]) < 0.0000010000000000 &&
                              IKabs(evalcond[1]) < 0.0000010000000000 &&
                              IKabs(evalcond[2]) < 0.0000010000000000 &&
                              IKabs(evalcond[3]) < 0.0000010000000000 &&
                              IKabs(evalcond[4]) < 0.0000010000000000 &&
                              IKabs(evalcond[5]) < 0.0000010000000000 &&
                              IKabs(evalcond[6]) < 0.0000010000000000) {
                            {
                              IkReal j3array[2], cj3array[2], sj3array[2];
                              bool j3valid[2] = {false};
                              _nj3 = 2;
                              if (IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH &&
                                  IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH)
                                continue;
                              IkReal x116 = IKatan2(new_r02, new_r12);
                              j3array[0] =
                                  ((IkReal(-1.00000000000000)) * (x116));
                              sj3array[0] = IKsin(j3array[0]);
                              cj3array[0] = IKcos(j3array[0]);
                              j3array[1] =
                                  ((IkReal(3.14159265358979)) +
                                   (((IkReal(-1.00000000000000)) * (x116))));
                              sj3array[1] = IKsin(j3array[1]);
                              cj3array[1] = IKcos(j3array[1]);
                              if (j3array[0] > IKPI) {
                                j3array[0] -= IK2PI;
                              } else if (j3array[0] < -IKPI) {
                                j3array[0] += IK2PI;
                              }
                              j3valid[0] = true;
                              if (j3array[1] > IKPI) {
                                j3array[1] -= IK2PI;
                              } else if (j3array[1] < -IKPI) {
                                j3array[1] += IK2PI;
                              }
                              j3valid[1] = true;
                              for (int ij3 = 0; ij3 < 2; ++ij3) {
                                if (!j3valid[ij3]) {
                                  continue;
                                }
                                _ij3[0] = ij3;
                                _ij3[1] = -1;
                                for (int iij3 = ij3 + 1; iij3 < 2; ++iij3) {
                                  if (j3valid[iij3] &&
                                      IKabs(cj3array[ij3] - cj3array[iij3]) <
                                          IKFAST_SOLUTION_THRESH &&
                                      IKabs(sj3array[ij3] - sj3array[iij3]) <
                                          IKFAST_SOLUTION_THRESH) {
                                    j3valid[iij3] = false;
                                    _ij3[1] = iij3;
                                    break;
                                  }
                                }
                                j3 = j3array[ij3];
                                cj3 = cj3array[ij3];
                                sj3 = sj3array[ij3];
                                {
                                  IkReal evalcond[1];
                                  evalcond[0] = ((((IkReal(-1.00000000000000)) *
                                                   (new_r02) * (IKsin(j3)))) +
                                                 (((new_r12) * (IKcos(j3)))));
                                  if (IKabs(evalcond[0]) > 0.000001) {
                                    continue;
                                  }
                                }

                                {
                                  IkReal j5array[1], cj5array[1], sj5array[1];
                                  bool j5valid[1] = {false};
                                  _nj5 = 1;
                                  if (IKabs(((((new_r11) * (sj3))) +
                                             (((cj3) * (new_r01))))) <
                                          IKFAST_ATAN2_MAGTHRESH &&
                                      IKabs(((((IkReal(-1.00000000000000)) *
                                               (cj3) * (new_r00))) +
                                             (((IkReal(-1.00000000000000)) *
                                               (new_r10) * (sj3))))) <
                                          IKFAST_ATAN2_MAGTHRESH &&
                                      IKabs(
                                          IKsqr(((((new_r11) * (sj3))) +
                                                 (((cj3) * (new_r01))))) +
                                          IKsqr(((((IkReal(-1.00000000000000)) *
                                                   (cj3) * (new_r00))) +
                                                 (((IkReal(-1.00000000000000)) *
                                                   (new_r10) * (sj3))))) -
                                          1) <= IKFAST_SINCOS_THRESH)
                                    continue;
                                  j5array[0] =
                                      IKatan2(((((new_r11) * (sj3))) +
                                               (((cj3) * (new_r01)))),
                                              ((((IkReal(-1.00000000000000)) *
                                                 (cj3) * (new_r00))) +
                                               (((IkReal(-1.00000000000000)) *
                                                 (new_r10) * (sj3)))));
                                  sj5array[0] = IKsin(j5array[0]);
                                  cj5array[0] = IKcos(j5array[0]);
                                  if (j5array[0] > IKPI) {
                                    j5array[0] -= IK2PI;
                                  } else if (j5array[0] < -IKPI) {
                                    j5array[0] += IK2PI;
                                  }
                                  j5valid[0] = true;
                                  for (int ij5 = 0; ij5 < 1; ++ij5) {
                                    if (!j5valid[ij5]) {
                                      continue;
                                    }
                                    _ij5[0] = ij5;
                                    _ij5[1] = -1;
                                    for (int iij5 = ij5 + 1; iij5 < 1; ++iij5) {
                                      if (j5valid[iij5] &&
                                          IKabs(cj5array[ij5] -
                                                cj5array[iij5]) <
                                              IKFAST_SOLUTION_THRESH &&
                                          IKabs(sj5array[ij5] -
                                                sj5array[iij5]) <
                                              IKFAST_SOLUTION_THRESH) {
                                        j5valid[iij5] = false;
                                        _ij5[1] = iij5;
                                        break;
                                      }
                                    }
                                    j5 = j5array[ij5];
                                    cj5 = cj5array[ij5];
                                    sj5 = sj5array[ij5];
                                    {
                                      IkReal evalcond[4];
                                      IkReal x117 = IKcos(j5);
                                      IkReal x118 =
                                          ((IkReal(1.00000000000000)) * (sj3));
                                      IkReal x119 =
                                          ((IkReal(1.00000000000000)) *
                                           (IKsin(j5)));
                                      evalcond[0] =
                                          ((((IkReal(-1.00000000000000)) *
                                             (new_r00) * (x118))) +
                                           (((IkReal(-1.00000000000000)) *
                                             (x119))) +
                                           (((cj3) * (new_r10))));
                                      evalcond[1] =
                                          ((((IkReal(-1.00000000000000)) *
                                             (new_r01) * (x118))) +
                                           (((cj3) * (new_r11))) +
                                           (((IkReal(-1.00000000000000)) *
                                             (x117))));
                                      evalcond[2] =
                                          ((((new_r11) * (sj3))) +
                                           (((IkReal(-1.00000000000000)) *
                                             (x119))) +
                                           (((cj3) * (new_r01))));
                                      evalcond[3] =
                                          ((((new_r10) * (sj3))) + (x117) +
                                           (((cj3) * (new_r00))));
                                      if (IKabs(evalcond[0]) > 0.000001 ||
                                          IKabs(evalcond[1]) > 0.000001 ||
                                          IKabs(evalcond[2]) > 0.000001 ||
                                          IKabs(evalcond[3]) > 0.000001) {
                                        continue;
                                      }
                                    }

                                    {
                                      std::vector<
                                          IkSingleDOFSolutionBase<IkReal>>
                                          vinfos(6);
                                      vinfos[0].jointtype = 1;
                                      vinfos[0].foffset = j0;
                                      vinfos[0].indices[0] = _ij0[0];
                                      vinfos[0].indices[1] = _ij0[1];
                                      vinfos[0].maxsolutions = _nj0;
                                      vinfos[1].jointtype = 1;
                                      vinfos[1].foffset = j1;
                                      vinfos[1].indices[0] = _ij1[0];
                                      vinfos[1].indices[1] = _ij1[1];
                                      vinfos[1].maxsolutions = _nj1;
                                      vinfos[2].jointtype = 1;
                                      vinfos[2].foffset = j2;
                                      vinfos[2].indices[0] = _ij2[0];
                                      vinfos[2].indices[1] = _ij2[1];
                                      vinfos[2].maxsolutions = _nj2;
                                      vinfos[3].jointtype = 1;
                                      vinfos[3].foffset = j3;
                                      vinfos[3].indices[0] = _ij3[0];
                                      vinfos[3].indices[1] = _ij3[1];
                                      vinfos[3].maxsolutions = _nj3;
                                      vinfos[4].jointtype = 1;
                                      vinfos[4].foffset = j4;
                                      vinfos[4].indices[0] = _ij4[0];
                                      vinfos[4].indices[1] = _ij4[1];
                                      vinfos[4].maxsolutions = _nj4;
                                      vinfos[5].jointtype = 1;
                                      vinfos[5].foffset = j5;
                                      vinfos[5].indices[0] = _ij5[0];
                                      vinfos[5].indices[1] = _ij5[1];
                                      vinfos[5].maxsolutions = _nj5;
                                      std::vector<int> vfree(0);
                                      solutions.AddSolution(vinfos, vfree);
                                    }
                                  }
                                }
                              }
                            }

                          } else {
                            if (1) {
                              continue;

                            } else {
                            }
                          }
                        }
                      }

                    } else {
                      {
                        IkReal j3array[1], cj3array[1], sj3array[1];
                        bool j3valid[1] = {false};
                        _nj3 = 1;
                        IkReal x120 = ((IkReal(-1.00000000000000)) * (cj4) *
                                       (gconst3) * (new_r20));
                        if (IKabs(((new_r12) * (x120))) <
                                IKFAST_ATAN2_MAGTHRESH &&
                            IKabs(((new_r02) * (x120))) <
                                IKFAST_ATAN2_MAGTHRESH)
                          continue;
                        j3array[0] =
                            IKatan2(((new_r12) * (x120)), ((new_r02) * (x120)));
                        sj3array[0] = IKsin(j3array[0]);
                        cj3array[0] = IKcos(j3array[0]);
                        if (j3array[0] > IKPI) {
                          j3array[0] -= IK2PI;
                        } else if (j3array[0] < -IKPI) {
                          j3array[0] += IK2PI;
                        }
                        j3valid[0] = true;
                        for (int ij3 = 0; ij3 < 1; ++ij3) {
                          if (!j3valid[ij3]) {
                            continue;
                          }
                          _ij3[0] = ij3;
                          _ij3[1] = -1;
                          for (int iij3 = ij3 + 1; iij3 < 1; ++iij3) {
                            if (j3valid[iij3] &&
                                IKabs(cj3array[ij3] - cj3array[iij3]) <
                                    IKFAST_SOLUTION_THRESH &&
                                IKabs(sj3array[ij3] - sj3array[iij3]) <
                                    IKFAST_SOLUTION_THRESH) {
                              j3valid[iij3] = false;
                              _ij3[1] = iij3;
                              break;
                            }
                          }
                          j3 = j3array[ij3];
                          cj3 = cj3array[ij3];
                          sj3 = sj3array[ij3];
                          {
                            IkReal evalcond[6];
                            IkReal x121 = IKsin(j3);
                            IkReal x122 = IKcos(j3);
                            IkReal x123 = ((IkReal(1.00000000000000)) * (sj4));
                            IkReal x124 = ((sj4) * (x121));
                            IkReal x125 = ((sj4) * (x122));
                            IkReal x126 = ((new_r02) * (x122));
                            IkReal x127 = ((new_r12) * (x121));
                            evalcond[0] = ((((IkReal(-1.00000000000000)) *
                                             (new_r02) * (x121))) +
                                           (((new_r12) * (x122))));
                            evalcond[1] =
                                ((((IkReal(-1.00000000000000)) * (x123))) +
                                 (x126) + (x127));
                            evalcond[2] = ((((new_r00) * (x125))) +
                                           (((cj4) * (new_r20))) +
                                           (((new_r10) * (x124))));
                            evalcond[3] = ((((cj4) * (new_r21))) +
                                           (((new_r01) * (x125))) +
                                           (((new_r11) * (x124))));
                            evalcond[4] = ((IkReal(-1.00000000000000)) +
                                           (((cj4) * (new_r22))) +
                                           (((new_r02) * (x125))) +
                                           (((new_r12) * (x124))));
                            evalcond[5] =
                                ((((IkReal(-1.00000000000000)) * (new_r22) *
                                   (x123))) +
                                 (((cj4) * (x126))) + (((cj4) * (x127))));
                            if (IKabs(evalcond[0]) > 0.000001 ||
                                IKabs(evalcond[1]) > 0.000001 ||
                                IKabs(evalcond[2]) > 0.000001 ||
                                IKabs(evalcond[3]) > 0.000001 ||
                                IKabs(evalcond[4]) > 0.000001 ||
                                IKabs(evalcond[5]) > 0.000001) {
                              continue;
                            }
                          }

                          {
                            IkReal dummyeval[1];
                            IkReal gconst5;
                            gconst5 = IKsign(sj4);
                            dummyeval[0] = sj4;
                            if (IKabs(dummyeval[0]) < 0.0000010000000000) {
                              {
                                IkReal dummyeval[1];
                                dummyeval[0] = sj4;
                                if (IKabs(dummyeval[0]) < 0.0000010000000000) {
                                  {
                                    IkReal dummyeval[1];
                                    dummyeval[0] = sj4;
                                    if (IKabs(dummyeval[0]) <
                                        0.0000010000000000) {
                                      {
                                        IkReal evalcond[11];
                                        IkReal x128 =
                                            ((IkReal(-1.00000000000000)) +
                                             (new_r22));
                                        IkReal x129 =
                                            ((((IkReal(-1.00000000000000)) *
                                               (new_r02) * (sj3))) +
                                             (((cj3) * (new_r12))));
                                        IkReal x130 = ((((new_r12) * (sj3))) +
                                                       (((cj3) * (new_r02))));
                                        evalcond[0] =
                                            ((IkReal(-3.14159265358979)) +
                                             (IKfmod(
                                                 ((IkReal(3.14159265358979)) +
                                                  (j4)),
                                                 IkReal(6.28318530717959))));
                                        evalcond[1] = x128;
                                        evalcond[2] = new_r20;
                                        evalcond[3] = new_r21;
                                        evalcond[4] = x129;
                                        evalcond[5] = x129;
                                        evalcond[6] = x130;
                                        evalcond[7] = new_r20;
                                        evalcond[8] = new_r21;
                                        evalcond[9] = x128;
                                        evalcond[10] = x130;
                                        if (IKabs(evalcond[0]) <
                                                0.0000010000000000 &&
                                            IKabs(evalcond[1]) <
                                                0.0000010000000000 &&
                                            IKabs(evalcond[2]) <
                                                0.0000010000000000 &&
                                            IKabs(evalcond[3]) <
                                                0.0000010000000000 &&
                                            IKabs(evalcond[4]) <
                                                0.0000010000000000 &&
                                            IKabs(evalcond[5]) <
                                                0.0000010000000000 &&
                                            IKabs(evalcond[6]) <
                                                0.0000010000000000 &&
                                            IKabs(evalcond[7]) <
                                                0.0000010000000000 &&
                                            IKabs(evalcond[8]) <
                                                0.0000010000000000 &&
                                            IKabs(evalcond[9]) <
                                                0.0000010000000000 &&
                                            IKabs(evalcond[10]) <
                                                0.0000010000000000) {
                                          {
                                            IkReal j5array[1], cj5array[1],
                                                sj5array[1];
                                            bool j5valid[1] = {false};
                                            _nj5 = 1;
                                            if (IKabs(
                                                    ((((IkReal(
                                                           -1.00000000000000)) *
                                                       (cj3) * (new_r01))) +
                                                     (((IkReal(
                                                           -1.00000000000000)) *
                                                       (new_r11) * (sj3))))) <
                                                    IKFAST_ATAN2_MAGTHRESH &&
                                                IKabs(((((new_r10) * (sj3))) +
                                                       (((cj3) * (new_r00))))) <
                                                    IKFAST_ATAN2_MAGTHRESH &&
                                                IKabs(
                                                    IKsqr((
                                                        (((IkReal(
                                                              -1.00000000000000)) *
                                                          (cj3) * (new_r01))) +
                                                        (((IkReal(
                                                              -1.00000000000000)) *
                                                          (new_r11) *
                                                          (sj3))))) +
                                                    IKsqr(
                                                        ((((new_r10) * (sj3))) +
                                                         (((cj3) *
                                                           (new_r00))))) -
                                                    1) <= IKFAST_SINCOS_THRESH)
                                              continue;
                                            j5array[0] = IKatan2(
                                                ((((IkReal(-1.00000000000000)) *
                                                   (cj3) * (new_r01))) +
                                                 (((IkReal(-1.00000000000000)) *
                                                   (new_r11) * (sj3)))),
                                                ((((new_r10) * (sj3))) +
                                                 (((cj3) * (new_r00)))));
                                            sj5array[0] = IKsin(j5array[0]);
                                            cj5array[0] = IKcos(j5array[0]);
                                            if (j5array[0] > IKPI) {
                                              j5array[0] -= IK2PI;
                                            } else if (j5array[0] < -IKPI) {
                                              j5array[0] += IK2PI;
                                            }
                                            j5valid[0] = true;
                                            for (int ij5 = 0; ij5 < 1; ++ij5) {
                                              if (!j5valid[ij5]) {
                                                continue;
                                              }
                                              _ij5[0] = ij5;
                                              _ij5[1] = -1;
                                              for (int iij5 = ij5 + 1; iij5 < 1;
                                                   ++iij5) {
                                                if (j5valid[iij5] &&
                                                    IKabs(cj5array[ij5] -
                                                          cj5array[iij5]) <
                                                        IKFAST_SOLUTION_THRESH &&
                                                    IKabs(sj5array[ij5] -
                                                          sj5array[iij5]) <
                                                        IKFAST_SOLUTION_THRESH) {
                                                  j5valid[iij5] = false;
                                                  _ij5[1] = iij5;
                                                  break;
                                                }
                                              }
                                              j5 = j5array[ij5];
                                              cj5 = cj5array[ij5];
                                              sj5 = sj5array[ij5];
                                              {
                                                IkReal evalcond[4];
                                                IkReal x131 = IKsin(j5);
                                                IkReal x132 =
                                                    ((IkReal(
                                                         1.00000000000000)) *
                                                     (sj3));
                                                IkReal x133 =
                                                    ((IkReal(
                                                         1.00000000000000)) *
                                                     (IKcos(j5)));
                                                evalcond[0] =
                                                    ((((IkReal(
                                                           -1.00000000000000)) *
                                                       (new_r00) * (x132))) +
                                                     (((cj3) * (new_r10))) +
                                                     (((IkReal(
                                                           -1.00000000000000)) *
                                                       (x131))));
                                                evalcond[1] =
                                                    ((((IkReal(
                                                           -1.00000000000000)) *
                                                       (new_r01) * (x132))) +
                                                     (((IkReal(
                                                           -1.00000000000000)) *
                                                       (x133))) +
                                                     (((cj3) * (new_r11))));
                                                evalcond[2] =
                                                    ((((new_r11) * (sj3))) +
                                                     (x131) +
                                                     (((cj3) * (new_r01))));
                                                evalcond[3] =
                                                    ((((new_r10) * (sj3))) +
                                                     (((IkReal(
                                                           -1.00000000000000)) *
                                                       (x133))) +
                                                     (((cj3) * (new_r00))));
                                                if (IKabs(evalcond[0]) >
                                                        0.000001 ||
                                                    IKabs(evalcond[1]) >
                                                        0.000001 ||
                                                    IKabs(evalcond[2]) >
                                                        0.000001 ||
                                                    IKabs(evalcond[3]) >
                                                        0.000001) {
                                                  continue;
                                                }
                                              }

                                              {
                                                std::vector<
                                                    IkSingleDOFSolutionBase<
                                                        IkReal>>
                                                    vinfos(6);
                                                vinfos[0].jointtype = 1;
                                                vinfos[0].foffset = j0;
                                                vinfos[0].indices[0] = _ij0[0];
                                                vinfos[0].indices[1] = _ij0[1];
                                                vinfos[0].maxsolutions = _nj0;
                                                vinfos[1].jointtype = 1;
                                                vinfos[1].foffset = j1;
                                                vinfos[1].indices[0] = _ij1[0];
                                                vinfos[1].indices[1] = _ij1[1];
                                                vinfos[1].maxsolutions = _nj1;
                                                vinfos[2].jointtype = 1;
                                                vinfos[2].foffset = j2;
                                                vinfos[2].indices[0] = _ij2[0];
                                                vinfos[2].indices[1] = _ij2[1];
                                                vinfos[2].maxsolutions = _nj2;
                                                vinfos[3].jointtype = 1;
                                                vinfos[3].foffset = j3;
                                                vinfos[3].indices[0] = _ij3[0];
                                                vinfos[3].indices[1] = _ij3[1];
                                                vinfos[3].maxsolutions = _nj3;
                                                vinfos[4].jointtype = 1;
                                                vinfos[4].foffset = j4;
                                                vinfos[4].indices[0] = _ij4[0];
                                                vinfos[4].indices[1] = _ij4[1];
                                                vinfos[4].maxsolutions = _nj4;
                                                vinfos[5].jointtype = 1;
                                                vinfos[5].foffset = j5;
                                                vinfos[5].indices[0] = _ij5[0];
                                                vinfos[5].indices[1] = _ij5[1];
                                                vinfos[5].maxsolutions = _nj5;
                                                std::vector<int> vfree(0);
                                                solutions.AddSolution(vinfos,
                                                                      vfree);
                                              }
                                            }
                                          }

                                        } else {
                                          IkReal x134 = ((new_r12) * (sj3));
                                          IkReal x135 =
                                              ((IkReal(1.00000000000000)) *
                                               (new_r02));
                                          IkReal x136 =
                                              ((((IkReal(-1.00000000000000)) *
                                                 (sj3) * (x135))) +
                                               (((cj3) * (new_r12))));
                                          evalcond[0] =
                                              ((IkReal(-3.14159265358979)) +
                                               (IKfmod(
                                                   ((IkReal(
                                                        1.11022302462516e-16)) +
                                                    (j4)),
                                                   IkReal(6.28318530717959))));
                                          evalcond[1] =
                                              ((IkReal(1.00000000000000)) +
                                               (new_r22));
                                          evalcond[2] = new_r20;
                                          evalcond[3] = new_r21;
                                          evalcond[4] = x136;
                                          evalcond[5] = x136;
                                          evalcond[6] =
                                              ((x134) + (((cj3) * (new_r02))));
                                          evalcond[7] =
                                              ((IkReal(-1.00000000000000)) *
                                               (new_r20));
                                          evalcond[8] =
                                              ((IkReal(-1.00000000000000)) *
                                               (new_r21));
                                          evalcond[9] =
                                              ((IkReal(-1.00000000000000)) +
                                               (((IkReal(-1.00000000000000)) *
                                                 (new_r22))));
                                          evalcond[10] =
                                              ((((IkReal(-1.00000000000000)) *
                                                 (cj3) * (x135))) +
                                               (((IkReal(-1.00000000000000)) *
                                                 (x134))));
                                          if (IKabs(evalcond[0]) <
                                                  0.0000010000000000 &&
                                              IKabs(evalcond[1]) <
                                                  0.0000010000000000 &&
                                              IKabs(evalcond[2]) <
                                                  0.0000010000000000 &&
                                              IKabs(evalcond[3]) <
                                                  0.0000010000000000 &&
                                              IKabs(evalcond[4]) <
                                                  0.0000010000000000 &&
                                              IKabs(evalcond[5]) <
                                                  0.0000010000000000 &&
                                              IKabs(evalcond[6]) <
                                                  0.0000010000000000 &&
                                              IKabs(evalcond[7]) <
                                                  0.0000010000000000 &&
                                              IKabs(evalcond[8]) <
                                                  0.0000010000000000 &&
                                              IKabs(evalcond[9]) <
                                                  0.0000010000000000 &&
                                              IKabs(evalcond[10]) <
                                                  0.0000010000000000) {
                                            {
                                              IkReal j5array[1], cj5array[1],
                                                  sj5array[1];
                                              bool j5valid[1] = {false};
                                              _nj5 = 1;
                                              if (IKabs(
                                                      ((((new_r11) * (sj3))) +
                                                       (((cj3) * (new_r01))))) <
                                                      IKFAST_ATAN2_MAGTHRESH &&
                                                  IKabs((
                                                      (((IkReal(
                                                            -1.00000000000000)) *
                                                        (cj3) * (new_r00))) +
                                                      (((IkReal(
                                                            -1.00000000000000)) *
                                                        (new_r10) * (sj3))))) <
                                                      IKFAST_ATAN2_MAGTHRESH &&
                                                  IKabs(
                                                      IKsqr(((((new_r11) *
                                                               (sj3))) +
                                                             (((cj3) *
                                                               (new_r01))))) +
                                                      IKsqr((
                                                          (((IkReal(
                                                                -1.00000000000000)) *
                                                            (cj3) *
                                                            (new_r00))) +
                                                          (((IkReal(
                                                                -1.00000000000000)) *
                                                            (new_r10) *
                                                            (sj3))))) -
                                                      1) <=
                                                      IKFAST_SINCOS_THRESH)
                                                continue;
                                              j5array[0] = IKatan2(
                                                  ((((new_r11) * (sj3))) +
                                                   (((cj3) * (new_r01)))),
                                                  ((((IkReal(
                                                         -1.00000000000000)) *
                                                     (cj3) * (new_r00))) +
                                                   (((IkReal(
                                                         -1.00000000000000)) *
                                                     (new_r10) * (sj3)))));
                                              sj5array[0] = IKsin(j5array[0]);
                                              cj5array[0] = IKcos(j5array[0]);
                                              if (j5array[0] > IKPI) {
                                                j5array[0] -= IK2PI;
                                              } else if (j5array[0] < -IKPI) {
                                                j5array[0] += IK2PI;
                                              }
                                              j5valid[0] = true;
                                              for (int ij5 = 0; ij5 < 1;
                                                   ++ij5) {
                                                if (!j5valid[ij5]) {
                                                  continue;
                                                }
                                                _ij5[0] = ij5;
                                                _ij5[1] = -1;
                                                for (int iij5 = ij5 + 1;
                                                     iij5 < 1; ++iij5) {
                                                  if (j5valid[iij5] &&
                                                      IKabs(cj5array[ij5] -
                                                            cj5array[iij5]) <
                                                          IKFAST_SOLUTION_THRESH &&
                                                      IKabs(sj5array[ij5] -
                                                            sj5array[iij5]) <
                                                          IKFAST_SOLUTION_THRESH) {
                                                    j5valid[iij5] = false;
                                                    _ij5[1] = iij5;
                                                    break;
                                                  }
                                                }
                                                j5 = j5array[ij5];
                                                cj5 = cj5array[ij5];
                                                sj5 = sj5array[ij5];
                                                {
                                                  IkReal evalcond[4];
                                                  IkReal x137 = IKcos(j5);
                                                  IkReal x138 =
                                                      ((IkReal(
                                                           1.00000000000000)) *
                                                       (sj3));
                                                  IkReal x139 =
                                                      ((IkReal(
                                                           1.00000000000000)) *
                                                       (IKsin(j5)));
                                                  evalcond[0] =
                                                      ((((IkReal(
                                                             -1.00000000000000)) *
                                                         (new_r00) * (x138))) +
                                                       (((IkReal(
                                                             -1.00000000000000)) *
                                                         (x139))) +
                                                       (((cj3) * (new_r10))));
                                                  evalcond[1] =
                                                      ((((IkReal(
                                                             -1.00000000000000)) *
                                                         (new_r01) * (x138))) +
                                                       (((cj3) * (new_r11))) +
                                                       (((IkReal(
                                                             -1.00000000000000)) *
                                                         (x137))));
                                                  evalcond[2] =
                                                      ((((new_r11) * (sj3))) +
                                                       (((IkReal(
                                                             -1.00000000000000)) *
                                                         (x139))) +
                                                       (((cj3) * (new_r01))));
                                                  evalcond[3] =
                                                      ((((new_r10) * (sj3))) +
                                                       (x137) +
                                                       (((cj3) * (new_r00))));
                                                  if (IKabs(evalcond[0]) >
                                                          0.000001 ||
                                                      IKabs(evalcond[1]) >
                                                          0.000001 ||
                                                      IKabs(evalcond[2]) >
                                                          0.000001 ||
                                                      IKabs(evalcond[3]) >
                                                          0.000001) {
                                                    continue;
                                                  }
                                                }

                                                {
                                                  std::vector<
                                                      IkSingleDOFSolutionBase<
                                                          IkReal>>
                                                      vinfos(6);
                                                  vinfos[0].jointtype = 1;
                                                  vinfos[0].foffset = j0;
                                                  vinfos[0].indices[0] =
                                                      _ij0[0];
                                                  vinfos[0].indices[1] =
                                                      _ij0[1];
                                                  vinfos[0].maxsolutions = _nj0;
                                                  vinfos[1].jointtype = 1;
                                                  vinfos[1].foffset = j1;
                                                  vinfos[1].indices[0] =
                                                      _ij1[0];
                                                  vinfos[1].indices[1] =
                                                      _ij1[1];
                                                  vinfos[1].maxsolutions = _nj1;
                                                  vinfos[2].jointtype = 1;
                                                  vinfos[2].foffset = j2;
                                                  vinfos[2].indices[0] =
                                                      _ij2[0];
                                                  vinfos[2].indices[1] =
                                                      _ij2[1];
                                                  vinfos[2].maxsolutions = _nj2;
                                                  vinfos[3].jointtype = 1;
                                                  vinfos[3].foffset = j3;
                                                  vinfos[3].indices[0] =
                                                      _ij3[0];
                                                  vinfos[3].indices[1] =
                                                      _ij3[1];
                                                  vinfos[3].maxsolutions = _nj3;
                                                  vinfos[4].jointtype = 1;
                                                  vinfos[4].foffset = j4;
                                                  vinfos[4].indices[0] =
                                                      _ij4[0];
                                                  vinfos[4].indices[1] =
                                                      _ij4[1];
                                                  vinfos[4].maxsolutions = _nj4;
                                                  vinfos[5].jointtype = 1;
                                                  vinfos[5].foffset = j5;
                                                  vinfos[5].indices[0] =
                                                      _ij5[0];
                                                  vinfos[5].indices[1] =
                                                      _ij5[1];
                                                  vinfos[5].maxsolutions = _nj5;
                                                  std::vector<int> vfree(0);
                                                  solutions.AddSolution(vinfos,
                                                                        vfree);
                                                }
                                              }
                                            }

                                          } else {
                                            if (1) {
                                              continue;

                                            } else {
                                            }
                                          }
                                        }
                                      }

                                    } else {
                                      {
                                        IkReal j5array[1], cj5array[1],
                                            sj5array[1];
                                        bool j5valid[1] = {false};
                                        _nj5 = 1;
                                        if (IKabs(
                                                ((((cj3) * (new_r10))) +
                                                 (((IkReal(-1.00000000000000)) *
                                                   (new_r00) * (sj3))))) <
                                                IKFAST_ATAN2_MAGTHRESH &&
                                            IKabs(((IkReal(-1.00000000000000)) *
                                                   (new_r20) *
                                                   (((IKabs(sj4) != 0)
                                                         ? ((IkReal)1 / (sj4))
                                                         : (IkReal)1.0e30)))) <
                                                IKFAST_ATAN2_MAGTHRESH &&
                                            IKabs(
                                                IKsqr(
                                                    ((((cj3) * (new_r10))) +
                                                     (((IkReal(
                                                           -1.00000000000000)) *
                                                       (new_r00) * (sj3))))) +
                                                IKsqr((
                                                    (IkReal(
                                                        -1.00000000000000)) *
                                                    (new_r20) *
                                                    (((IKabs(sj4) != 0)
                                                          ? ((IkReal)1 / (sj4))
                                                          : (IkReal)1.0e30)))) -
                                                1) <= IKFAST_SINCOS_THRESH)
                                          continue;
                                        j5array[0] = IKatan2(
                                            ((((cj3) * (new_r10))) +
                                             (((IkReal(-1.00000000000000)) *
                                               (new_r00) * (sj3)))),
                                            ((IkReal(-1.00000000000000)) *
                                             (new_r20) *
                                             (((IKabs(sj4) != 0)
                                                   ? ((IkReal)1 / (sj4))
                                                   : (IkReal)1.0e30))));
                                        sj5array[0] = IKsin(j5array[0]);
                                        cj5array[0] = IKcos(j5array[0]);
                                        if (j5array[0] > IKPI) {
                                          j5array[0] -= IK2PI;
                                        } else if (j5array[0] < -IKPI) {
                                          j5array[0] += IK2PI;
                                        }
                                        j5valid[0] = true;
                                        for (int ij5 = 0; ij5 < 1; ++ij5) {
                                          if (!j5valid[ij5]) {
                                            continue;
                                          }
                                          _ij5[0] = ij5;
                                          _ij5[1] = -1;
                                          for (int iij5 = ij5 + 1; iij5 < 1;
                                               ++iij5) {
                                            if (j5valid[iij5] &&
                                                IKabs(cj5array[ij5] -
                                                      cj5array[iij5]) <
                                                    IKFAST_SOLUTION_THRESH &&
                                                IKabs(sj5array[ij5] -
                                                      sj5array[iij5]) <
                                                    IKFAST_SOLUTION_THRESH) {
                                              j5valid[iij5] = false;
                                              _ij5[1] = iij5;
                                              break;
                                            }
                                          }
                                          j5 = j5array[ij5];
                                          cj5 = cj5array[ij5];
                                          sj5 = sj5array[ij5];
                                          {
                                            IkReal evalcond[8];
                                            IkReal x140 = IKsin(j5);
                                            IkReal x141 = IKcos(j5);
                                            IkReal x142 =
                                                ((IkReal(1.00000000000000)) *
                                                 (sj3));
                                            IkReal x143 = ((new_r11) * (sj3));
                                            IkReal x144 = ((new_r10) * (sj3));
                                            IkReal x145 = ((cj3) * (cj4));
                                            IkReal x146 =
                                                ((IkReal(1.00000000000000)) *
                                                 (sj4));
                                            IkReal x147 =
                                                ((IkReal(1.00000000000000)) *
                                                 (x141));
                                            IkReal x148 =
                                                ((IkReal(1.00000000000000)) *
                                                 (x140));
                                            evalcond[0] = ((((sj4) * (x141))) +
                                                           (new_r20));
                                            evalcond[1] =
                                                ((((IkReal(-1.00000000000000)) *
                                                   (x140) * (x146))) +
                                                 (new_r21));
                                            evalcond[2] =
                                                ((((IkReal(-1.00000000000000)) *
                                                   (x148))) +
                                                 (((cj3) * (new_r10))) +
                                                 (((IkReal(-1.00000000000000)) *
                                                   (new_r00) * (x142))));
                                            evalcond[3] =
                                                ((((IkReal(-1.00000000000000)) *
                                                   (new_r01) * (x142))) +
                                                 (((IkReal(-1.00000000000000)) *
                                                   (x147))) +
                                                 (((cj3) * (new_r11))));
                                            evalcond[4] =
                                                ((x143) +
                                                 (((cj3) * (new_r01))) +
                                                 (((cj4) * (x140))));
                                            evalcond[5] =
                                                ((x144) +
                                                 (((cj3) * (new_r00))) +
                                                 (((IkReal(-1.00000000000000)) *
                                                   (cj4) * (x147))));
                                            evalcond[6] =
                                                ((((new_r01) * (x145))) +
                                                 (((IkReal(-1.00000000000000)) *
                                                   (new_r21) * (x146))) +
                                                 (x140) + (((cj4) * (x143))));
                                            evalcond[7] =
                                                ((((IkReal(-1.00000000000000)) *
                                                   (x147))) +
                                                 (((IkReal(-1.00000000000000)) *
                                                   (new_r20) * (x146))) +
                                                 (((new_r00) * (x145))) +
                                                 (((cj4) * (x144))));
                                            if (IKabs(evalcond[0]) > 0.000001 ||
                                                IKabs(evalcond[1]) > 0.000001 ||
                                                IKabs(evalcond[2]) > 0.000001 ||
                                                IKabs(evalcond[3]) > 0.000001 ||
                                                IKabs(evalcond[4]) > 0.000001 ||
                                                IKabs(evalcond[5]) > 0.000001 ||
                                                IKabs(evalcond[6]) > 0.000001 ||
                                                IKabs(evalcond[7]) > 0.000001) {
                                              continue;
                                            }
                                          }

                                          {
                                            std::vector<
                                                IkSingleDOFSolutionBase<IkReal>>
                                                vinfos(6);
                                            vinfos[0].jointtype = 1;
                                            vinfos[0].foffset = j0;
                                            vinfos[0].indices[0] = _ij0[0];
                                            vinfos[0].indices[1] = _ij0[1];
                                            vinfos[0].maxsolutions = _nj0;
                                            vinfos[1].jointtype = 1;
                                            vinfos[1].foffset = j1;
                                            vinfos[1].indices[0] = _ij1[0];
                                            vinfos[1].indices[1] = _ij1[1];
                                            vinfos[1].maxsolutions = _nj1;
                                            vinfos[2].jointtype = 1;
                                            vinfos[2].foffset = j2;
                                            vinfos[2].indices[0] = _ij2[0];
                                            vinfos[2].indices[1] = _ij2[1];
                                            vinfos[2].maxsolutions = _nj2;
                                            vinfos[3].jointtype = 1;
                                            vinfos[3].foffset = j3;
                                            vinfos[3].indices[0] = _ij3[0];
                                            vinfos[3].indices[1] = _ij3[1];
                                            vinfos[3].maxsolutions = _nj3;
                                            vinfos[4].jointtype = 1;
                                            vinfos[4].foffset = j4;
                                            vinfos[4].indices[0] = _ij4[0];
                                            vinfos[4].indices[1] = _ij4[1];
                                            vinfos[4].maxsolutions = _nj4;
                                            vinfos[5].jointtype = 1;
                                            vinfos[5].foffset = j5;
                                            vinfos[5].indices[0] = _ij5[0];
                                            vinfos[5].indices[1] = _ij5[1];
                                            vinfos[5].maxsolutions = _nj5;
                                            std::vector<int> vfree(0);
                                            solutions.AddSolution(vinfos,
                                                                  vfree);
                                          }
                                        }
                                      }
                                    }
                                  }

                                } else {
                                  {
                                    IkReal j5array[1], cj5array[1], sj5array[1];
                                    bool j5valid[1] = {false};
                                    _nj5 = 1;
                                    if (IKabs(((new_r21) *
                                               (((IKabs(sj4) != 0)
                                                     ? ((IkReal)1 / (sj4))
                                                     : (IkReal)1.0e30)))) <
                                            IKFAST_ATAN2_MAGTHRESH &&
                                        IKabs(((((IkReal(-1.00000000000000)) *
                                                 (new_r01) * (sj3))) +
                                               (((cj3) * (new_r11))))) <
                                            IKFAST_ATAN2_MAGTHRESH &&
                                        IKabs(
                                            IKsqr(((new_r21) *
                                                   (((IKabs(sj4) != 0)
                                                         ? ((IkReal)1 / (sj4))
                                                         : (IkReal)1.0e30)))) +
                                            IKsqr(
                                                ((((IkReal(-1.00000000000000)) *
                                                   (new_r01) * (sj3))) +
                                                 (((cj3) * (new_r11))))) -
                                            1) <= IKFAST_SINCOS_THRESH)
                                      continue;
                                    j5array[0] = IKatan2(
                                        ((new_r21) * (((IKabs(sj4) != 0)
                                                           ? ((IkReal)1 / (sj4))
                                                           : (IkReal)1.0e30))),
                                        ((((IkReal(-1.00000000000000)) *
                                           (new_r01) * (sj3))) +
                                         (((cj3) * (new_r11)))));
                                    sj5array[0] = IKsin(j5array[0]);
                                    cj5array[0] = IKcos(j5array[0]);
                                    if (j5array[0] > IKPI) {
                                      j5array[0] -= IK2PI;
                                    } else if (j5array[0] < -IKPI) {
                                      j5array[0] += IK2PI;
                                    }
                                    j5valid[0] = true;
                                    for (int ij5 = 0; ij5 < 1; ++ij5) {
                                      if (!j5valid[ij5]) {
                                        continue;
                                      }
                                      _ij5[0] = ij5;
                                      _ij5[1] = -1;
                                      for (int iij5 = ij5 + 1; iij5 < 1;
                                           ++iij5) {
                                        if (j5valid[iij5] &&
                                            IKabs(cj5array[ij5] -
                                                  cj5array[iij5]) <
                                                IKFAST_SOLUTION_THRESH &&
                                            IKabs(sj5array[ij5] -
                                                  sj5array[iij5]) <
                                                IKFAST_SOLUTION_THRESH) {
                                          j5valid[iij5] = false;
                                          _ij5[1] = iij5;
                                          break;
                                        }
                                      }
                                      j5 = j5array[ij5];
                                      cj5 = cj5array[ij5];
                                      sj5 = sj5array[ij5];
                                      {
                                        IkReal evalcond[8];
                                        IkReal x149 = IKsin(j5);
                                        IkReal x150 = IKcos(j5);
                                        IkReal x151 =
                                            ((IkReal(1.00000000000000)) *
                                             (sj3));
                                        IkReal x152 = ((new_r11) * (sj3));
                                        IkReal x153 = ((new_r10) * (sj3));
                                        IkReal x154 = ((cj3) * (cj4));
                                        IkReal x155 =
                                            ((IkReal(1.00000000000000)) *
                                             (sj4));
                                        IkReal x156 =
                                            ((IkReal(1.00000000000000)) *
                                             (x150));
                                        IkReal x157 =
                                            ((IkReal(1.00000000000000)) *
                                             (x149));
                                        evalcond[0] =
                                            ((((sj4) * (x150))) + (new_r20));
                                        evalcond[1] =
                                            ((new_r21) +
                                             (((IkReal(-1.00000000000000)) *
                                               (x149) * (x155))));
                                        evalcond[2] =
                                            ((((IkReal(-1.00000000000000)) *
                                               (x157))) +
                                             (((cj3) * (new_r10))) +
                                             (((IkReal(-1.00000000000000)) *
                                               (new_r00) * (x151))));
                                        evalcond[3] =
                                            ((((IkReal(-1.00000000000000)) *
                                               (x156))) +
                                             (((cj3) * (new_r11))) +
                                             (((IkReal(-1.00000000000000)) *
                                               (new_r01) * (x151))));
                                        evalcond[4] =
                                            ((x152) + (((cj3) * (new_r01))) +
                                             (((cj4) * (x149))));
                                        evalcond[5] =
                                            ((x153) + (((cj3) * (new_r00))) +
                                             (((IkReal(-1.00000000000000)) *
                                               (cj4) * (x156))));
                                        evalcond[6] =
                                            ((((cj4) * (x152))) +
                                             (((new_r01) * (x154))) +
                                             (((IkReal(-1.00000000000000)) *
                                               (new_r21) * (x155))) +
                                             (x149));
                                        evalcond[7] =
                                            ((((cj4) * (x153))) +
                                             (((IkReal(-1.00000000000000)) *
                                               (new_r20) * (x155))) +
                                             (((IkReal(-1.00000000000000)) *
                                               (x156))) +
                                             (((new_r00) * (x154))));
                                        if (IKabs(evalcond[0]) > 0.000001 ||
                                            IKabs(evalcond[1]) > 0.000001 ||
                                            IKabs(evalcond[2]) > 0.000001 ||
                                            IKabs(evalcond[3]) > 0.000001 ||
                                            IKabs(evalcond[4]) > 0.000001 ||
                                            IKabs(evalcond[5]) > 0.000001 ||
                                            IKabs(evalcond[6]) > 0.000001 ||
                                            IKabs(evalcond[7]) > 0.000001) {
                                          continue;
                                        }
                                      }

                                      {
                                        std::vector<
                                            IkSingleDOFSolutionBase<IkReal>>
                                            vinfos(6);
                                        vinfos[0].jointtype = 1;
                                        vinfos[0].foffset = j0;
                                        vinfos[0].indices[0] = _ij0[0];
                                        vinfos[0].indices[1] = _ij0[1];
                                        vinfos[0].maxsolutions = _nj0;
                                        vinfos[1].jointtype = 1;
                                        vinfos[1].foffset = j1;
                                        vinfos[1].indices[0] = _ij1[0];
                                        vinfos[1].indices[1] = _ij1[1];
                                        vinfos[1].maxsolutions = _nj1;
                                        vinfos[2].jointtype = 1;
                                        vinfos[2].foffset = j2;
                                        vinfos[2].indices[0] = _ij2[0];
                                        vinfos[2].indices[1] = _ij2[1];
                                        vinfos[2].maxsolutions = _nj2;
                                        vinfos[3].jointtype = 1;
                                        vinfos[3].foffset = j3;
                                        vinfos[3].indices[0] = _ij3[0];
                                        vinfos[3].indices[1] = _ij3[1];
                                        vinfos[3].maxsolutions = _nj3;
                                        vinfos[4].jointtype = 1;
                                        vinfos[4].foffset = j4;
                                        vinfos[4].indices[0] = _ij4[0];
                                        vinfos[4].indices[1] = _ij4[1];
                                        vinfos[4].maxsolutions = _nj4;
                                        vinfos[5].jointtype = 1;
                                        vinfos[5].foffset = j5;
                                        vinfos[5].indices[0] = _ij5[0];
                                        vinfos[5].indices[1] = _ij5[1];
                                        vinfos[5].maxsolutions = _nj5;
                                        std::vector<int> vfree(0);
                                        solutions.AddSolution(vinfos, vfree);
                                      }
                                    }
                                  }
                                }
                              }

                            } else {
                              {
                                IkReal j5array[1], cj5array[1], sj5array[1];
                                bool j5valid[1] = {false};
                                _nj5 = 1;
                                if (IKabs(((gconst5) * (new_r21))) <
                                        IKFAST_ATAN2_MAGTHRESH &&
                                    IKabs(((IkReal(-1.00000000000000)) *
                                           (gconst5) * (new_r20))) <
                                        IKFAST_ATAN2_MAGTHRESH)
                                  continue;
                                j5array[0] =
                                    IKatan2(((gconst5) * (new_r21)),
                                            ((IkReal(-1.00000000000000)) *
                                             (gconst5) * (new_r20)));
                                sj5array[0] = IKsin(j5array[0]);
                                cj5array[0] = IKcos(j5array[0]);
                                if (j5array[0] > IKPI) {
                                  j5array[0] -= IK2PI;
                                } else if (j5array[0] < -IKPI) {
                                  j5array[0] += IK2PI;
                                }
                                j5valid[0] = true;
                                for (int ij5 = 0; ij5 < 1; ++ij5) {
                                  if (!j5valid[ij5]) {
                                    continue;
                                  }
                                  _ij5[0] = ij5;
                                  _ij5[1] = -1;
                                  for (int iij5 = ij5 + 1; iij5 < 1; ++iij5) {
                                    if (j5valid[iij5] &&
                                        IKabs(cj5array[ij5] - cj5array[iij5]) <
                                            IKFAST_SOLUTION_THRESH &&
                                        IKabs(sj5array[ij5] - sj5array[iij5]) <
                                            IKFAST_SOLUTION_THRESH) {
                                      j5valid[iij5] = false;
                                      _ij5[1] = iij5;
                                      break;
                                    }
                                  }
                                  j5 = j5array[ij5];
                                  cj5 = cj5array[ij5];
                                  sj5 = sj5array[ij5];
                                  {
                                    IkReal evalcond[8];
                                    IkReal x158 = IKsin(j5);
                                    IkReal x159 = IKcos(j5);
                                    IkReal x160 =
                                        ((IkReal(1.00000000000000)) * (sj3));
                                    IkReal x161 = ((new_r11) * (sj3));
                                    IkReal x162 = ((new_r10) * (sj3));
                                    IkReal x163 = ((cj3) * (cj4));
                                    IkReal x164 =
                                        ((IkReal(1.00000000000000)) * (sj4));
                                    IkReal x165 =
                                        ((IkReal(1.00000000000000)) * (x159));
                                    IkReal x166 =
                                        ((IkReal(1.00000000000000)) * (x158));
                                    evalcond[0] =
                                        ((((sj4) * (x159))) + (new_r20));
                                    evalcond[1] =
                                        ((((IkReal(-1.00000000000000)) *
                                           (x158) * (x164))) +
                                         (new_r21));
                                    evalcond[2] =
                                        ((((IkReal(-1.00000000000000)) *
                                           (new_r00) * (x160))) +
                                         (((IkReal(-1.00000000000000)) *
                                           (x166))) +
                                         (((cj3) * (new_r10))));
                                    evalcond[3] =
                                        ((((IkReal(-1.00000000000000)) *
                                           (x165))) +
                                         (((cj3) * (new_r11))) +
                                         (((IkReal(-1.00000000000000)) *
                                           (new_r01) * (x160))));
                                    evalcond[4] = ((((cj4) * (x158))) + (x161) +
                                                   (((cj3) * (new_r01))));
                                    evalcond[5] =
                                        ((((IkReal(-1.00000000000000)) * (cj4) *
                                           (x165))) +
                                         (x162) + (((cj3) * (new_r00))));
                                    evalcond[6] =
                                        ((((new_r01) * (x163))) +
                                         (((cj4) * (x161))) +
                                         (((IkReal(-1.00000000000000)) *
                                           (new_r21) * (x164))) +
                                         (x158));
                                    evalcond[7] =
                                        ((((new_r00) * (x163))) +
                                         (((cj4) * (x162))) +
                                         (((IkReal(-1.00000000000000)) *
                                           (x165))) +
                                         (((IkReal(-1.00000000000000)) *
                                           (new_r20) * (x164))));
                                    if (IKabs(evalcond[0]) > 0.000001 ||
                                        IKabs(evalcond[1]) > 0.000001 ||
                                        IKabs(evalcond[2]) > 0.000001 ||
                                        IKabs(evalcond[3]) > 0.000001 ||
                                        IKabs(evalcond[4]) > 0.000001 ||
                                        IKabs(evalcond[5]) > 0.000001 ||
                                        IKabs(evalcond[6]) > 0.000001 ||
                                        IKabs(evalcond[7]) > 0.000001) {
                                      continue;
                                    }
                                  }

                                  {
                                    std::vector<IkSingleDOFSolutionBase<IkReal>>
                                        vinfos(6);
                                    vinfos[0].jointtype = 1;
                                    vinfos[0].foffset = j0;
                                    vinfos[0].indices[0] = _ij0[0];
                                    vinfos[0].indices[1] = _ij0[1];
                                    vinfos[0].maxsolutions = _nj0;
                                    vinfos[1].jointtype = 1;
                                    vinfos[1].foffset = j1;
                                    vinfos[1].indices[0] = _ij1[0];
                                    vinfos[1].indices[1] = _ij1[1];
                                    vinfos[1].maxsolutions = _nj1;
                                    vinfos[2].jointtype = 1;
                                    vinfos[2].foffset = j2;
                                    vinfos[2].indices[0] = _ij2[0];
                                    vinfos[2].indices[1] = _ij2[1];
                                    vinfos[2].maxsolutions = _nj2;
                                    vinfos[3].jointtype = 1;
                                    vinfos[3].foffset = j3;
                                    vinfos[3].indices[0] = _ij3[0];
                                    vinfos[3].indices[1] = _ij3[1];
                                    vinfos[3].maxsolutions = _nj3;
                                    vinfos[4].jointtype = 1;
                                    vinfos[4].foffset = j4;
                                    vinfos[4].indices[0] = _ij4[0];
                                    vinfos[4].indices[1] = _ij4[1];
                                    vinfos[4].maxsolutions = _nj4;
                                    vinfos[5].jointtype = 1;
                                    vinfos[5].foffset = j5;
                                    vinfos[5].indices[0] = _ij5[0];
                                    vinfos[5].indices[1] = _ij5[1];
                                    vinfos[5].maxsolutions = _nj5;
                                    std::vector<int> vfree(0);
                                    solutions.AddSolution(vinfos, vfree);
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }

                } else {
                  {
                    IkReal j3array[1], cj3array[1], sj3array[1];
                    bool j3valid[1] = {false};
                    _nj3 = 1;
                    IkReal x167 = ((gconst2) * (sj4));
                    if (IKabs(((new_r12) * (x167))) < IKFAST_ATAN2_MAGTHRESH &&
                        IKabs(((new_r02) * (x167))) < IKFAST_ATAN2_MAGTHRESH)
                      continue;
                    j3array[0] =
                        IKatan2(((new_r12) * (x167)), ((new_r02) * (x167)));
                    sj3array[0] = IKsin(j3array[0]);
                    cj3array[0] = IKcos(j3array[0]);
                    if (j3array[0] > IKPI) {
                      j3array[0] -= IK2PI;
                    } else if (j3array[0] < -IKPI) {
                      j3array[0] += IK2PI;
                    }
                    j3valid[0] = true;
                    for (int ij3 = 0; ij3 < 1; ++ij3) {
                      if (!j3valid[ij3]) {
                        continue;
                      }
                      _ij3[0] = ij3;
                      _ij3[1] = -1;
                      for (int iij3 = ij3 + 1; iij3 < 1; ++iij3) {
                        if (j3valid[iij3] &&
                            IKabs(cj3array[ij3] - cj3array[iij3]) <
                                IKFAST_SOLUTION_THRESH &&
                            IKabs(sj3array[ij3] - sj3array[iij3]) <
                                IKFAST_SOLUTION_THRESH) {
                          j3valid[iij3] = false;
                          _ij3[1] = iij3;
                          break;
                        }
                      }
                      j3 = j3array[ij3];
                      cj3 = cj3array[ij3];
                      sj3 = sj3array[ij3];
                      {
                        IkReal evalcond[6];
                        IkReal x168 = IKsin(j3);
                        IkReal x169 = IKcos(j3);
                        IkReal x170 = ((IkReal(1.00000000000000)) * (sj4));
                        IkReal x171 = ((sj4) * (x168));
                        IkReal x172 = ((sj4) * (x169));
                        IkReal x173 = ((new_r02) * (x169));
                        IkReal x174 = ((new_r12) * (x168));
                        evalcond[0] = ((((new_r12) * (x169))) +
                                       (((IkReal(-1.00000000000000)) *
                                         (new_r02) * (x168))));
                        evalcond[1] =
                            ((((IkReal(-1.00000000000000)) * (x170))) + (x173) +
                             (x174));
                        evalcond[2] =
                            ((((new_r00) * (x172))) + (((new_r10) * (x171))) +
                             (((cj4) * (new_r20))));
                        evalcond[3] =
                            ((((new_r01) * (x172))) + (((new_r11) * (x171))) +
                             (((cj4) * (new_r21))));
                        evalcond[4] =
                            ((IkReal(-1.00000000000000)) +
                             (((new_r02) * (x172))) + (((cj4) * (new_r22))) +
                             (((new_r12) * (x171))));
                        evalcond[5] = ((((cj4) * (x174))) + (((cj4) * (x173))) +
                                       (((IkReal(-1.00000000000000)) *
                                         (new_r22) * (x170))));
                        if (IKabs(evalcond[0]) > 0.000001 ||
                            IKabs(evalcond[1]) > 0.000001 ||
                            IKabs(evalcond[2]) > 0.000001 ||
                            IKabs(evalcond[3]) > 0.000001 ||
                            IKabs(evalcond[4]) > 0.000001 ||
                            IKabs(evalcond[5]) > 0.000001) {
                          continue;
                        }
                      }

                      {
                        IkReal dummyeval[1];
                        IkReal gconst5;
                        gconst5 = IKsign(sj4);
                        dummyeval[0] = sj4;
                        if (IKabs(dummyeval[0]) < 0.0000010000000000) {
                          {
                            IkReal dummyeval[1];
                            dummyeval[0] = sj4;
                            if (IKabs(dummyeval[0]) < 0.0000010000000000) {
                              {
                                IkReal dummyeval[1];
                                dummyeval[0] = sj4;
                                if (IKabs(dummyeval[0]) < 0.0000010000000000) {
                                  {
                                    IkReal evalcond[11];
                                    IkReal x175 = ((IkReal(-1.00000000000000)) +
                                                   (new_r22));
                                    IkReal x176 =
                                        ((((IkReal(-1.00000000000000)) *
                                           (new_r02) * (sj3))) +
                                         (((cj3) * (new_r12))));
                                    IkReal x177 = ((((new_r12) * (sj3))) +
                                                   (((cj3) * (new_r02))));
                                    evalcond[0] =
                                        ((IkReal(-3.14159265358979)) +
                                         (IKfmod(((IkReal(3.14159265358979)) +
                                                  (j4)),
                                                 IkReal(6.28318530717959))));
                                    evalcond[1] = x175;
                                    evalcond[2] = new_r20;
                                    evalcond[3] = new_r21;
                                    evalcond[4] = x176;
                                    evalcond[5] = x176;
                                    evalcond[6] = x177;
                                    evalcond[7] = new_r20;
                                    evalcond[8] = new_r21;
                                    evalcond[9] = x175;
                                    evalcond[10] = x177;
                                    if (IKabs(evalcond[0]) <
                                            0.0000010000000000 &&
                                        IKabs(evalcond[1]) <
                                            0.0000010000000000 &&
                                        IKabs(evalcond[2]) <
                                            0.0000010000000000 &&
                                        IKabs(evalcond[3]) <
                                            0.0000010000000000 &&
                                        IKabs(evalcond[4]) <
                                            0.0000010000000000 &&
                                        IKabs(evalcond[5]) <
                                            0.0000010000000000 &&
                                        IKabs(evalcond[6]) <
                                            0.0000010000000000 &&
                                        IKabs(evalcond[7]) <
                                            0.0000010000000000 &&
                                        IKabs(evalcond[8]) <
                                            0.0000010000000000 &&
                                        IKabs(evalcond[9]) <
                                            0.0000010000000000 &&
                                        IKabs(evalcond[10]) <
                                            0.0000010000000000) {
                                      {
                                        IkReal j5array[1], cj5array[1],
                                            sj5array[1];
                                        bool j5valid[1] = {false};
                                        _nj5 = 1;
                                        if (IKabs(
                                                ((((IkReal(-1.00000000000000)) *
                                                   (cj3) * (new_r01))) +
                                                 (((IkReal(-1.00000000000000)) *
                                                   (new_r11) * (sj3))))) <
                                                IKFAST_ATAN2_MAGTHRESH &&
                                            IKabs(((((new_r10) * (sj3))) +
                                                   (((cj3) * (new_r00))))) <
                                                IKFAST_ATAN2_MAGTHRESH &&
                                            IKabs(
                                                IKsqr(
                                                    ((((IkReal(
                                                           -1.00000000000000)) *
                                                       (cj3) * (new_r01))) +
                                                     (((IkReal(
                                                           -1.00000000000000)) *
                                                       (new_r11) * (sj3))))) +
                                                IKsqr(((((new_r10) * (sj3))) +
                                                       (((cj3) * (new_r00))))) -
                                                1) <= IKFAST_SINCOS_THRESH)
                                          continue;
                                        j5array[0] = IKatan2(
                                            ((((IkReal(-1.00000000000000)) *
                                               (cj3) * (new_r01))) +
                                             (((IkReal(-1.00000000000000)) *
                                               (new_r11) * (sj3)))),
                                            ((((new_r10) * (sj3))) +
                                             (((cj3) * (new_r00)))));
                                        sj5array[0] = IKsin(j5array[0]);
                                        cj5array[0] = IKcos(j5array[0]);
                                        if (j5array[0] > IKPI) {
                                          j5array[0] -= IK2PI;
                                        } else if (j5array[0] < -IKPI) {
                                          j5array[0] += IK2PI;
                                        }
                                        j5valid[0] = true;
                                        for (int ij5 = 0; ij5 < 1; ++ij5) {
                                          if (!j5valid[ij5]) {
                                            continue;
                                          }
                                          _ij5[0] = ij5;
                                          _ij5[1] = -1;
                                          for (int iij5 = ij5 + 1; iij5 < 1;
                                               ++iij5) {
                                            if (j5valid[iij5] &&
                                                IKabs(cj5array[ij5] -
                                                      cj5array[iij5]) <
                                                    IKFAST_SOLUTION_THRESH &&
                                                IKabs(sj5array[ij5] -
                                                      sj5array[iij5]) <
                                                    IKFAST_SOLUTION_THRESH) {
                                              j5valid[iij5] = false;
                                              _ij5[1] = iij5;
                                              break;
                                            }
                                          }
                                          j5 = j5array[ij5];
                                          cj5 = cj5array[ij5];
                                          sj5 = sj5array[ij5];
                                          {
                                            IkReal evalcond[4];
                                            IkReal x178 = IKsin(j5);
                                            IkReal x179 =
                                                ((IkReal(1.00000000000000)) *
                                                 (sj3));
                                            IkReal x180 =
                                                ((IkReal(1.00000000000000)) *
                                                 (IKcos(j5)));
                                            evalcond[0] =
                                                ((((IkReal(-1.00000000000000)) *
                                                   (x178))) +
                                                 (((cj3) * (new_r10))) +
                                                 (((IkReal(-1.00000000000000)) *
                                                   (new_r00) * (x179))));
                                            evalcond[1] =
                                                ((((IkReal(-1.00000000000000)) *
                                                   (x180))) +
                                                 (((cj3) * (new_r11))) +
                                                 (((IkReal(-1.00000000000000)) *
                                                   (new_r01) * (x179))));
                                            evalcond[2] =
                                                ((((new_r11) * (sj3))) +
                                                 (x178) +
                                                 (((cj3) * (new_r01))));
                                            evalcond[3] =
                                                ((((new_r10) * (sj3))) +
                                                 (((IkReal(-1.00000000000000)) *
                                                   (x180))) +
                                                 (((cj3) * (new_r00))));
                                            if (IKabs(evalcond[0]) > 0.000001 ||
                                                IKabs(evalcond[1]) > 0.000001 ||
                                                IKabs(evalcond[2]) > 0.000001 ||
                                                IKabs(evalcond[3]) > 0.000001) {
                                              continue;
                                            }
                                          }

                                          {
                                            std::vector<
                                                IkSingleDOFSolutionBase<IkReal>>
                                                vinfos(6);
                                            vinfos[0].jointtype = 1;
                                            vinfos[0].foffset = j0;
                                            vinfos[0].indices[0] = _ij0[0];
                                            vinfos[0].indices[1] = _ij0[1];
                                            vinfos[0].maxsolutions = _nj0;
                                            vinfos[1].jointtype = 1;
                                            vinfos[1].foffset = j1;
                                            vinfos[1].indices[0] = _ij1[0];
                                            vinfos[1].indices[1] = _ij1[1];
                                            vinfos[1].maxsolutions = _nj1;
                                            vinfos[2].jointtype = 1;
                                            vinfos[2].foffset = j2;
                                            vinfos[2].indices[0] = _ij2[0];
                                            vinfos[2].indices[1] = _ij2[1];
                                            vinfos[2].maxsolutions = _nj2;
                                            vinfos[3].jointtype = 1;
                                            vinfos[3].foffset = j3;
                                            vinfos[3].indices[0] = _ij3[0];
                                            vinfos[3].indices[1] = _ij3[1];
                                            vinfos[3].maxsolutions = _nj3;
                                            vinfos[4].jointtype = 1;
                                            vinfos[4].foffset = j4;
                                            vinfos[4].indices[0] = _ij4[0];
                                            vinfos[4].indices[1] = _ij4[1];
                                            vinfos[4].maxsolutions = _nj4;
                                            vinfos[5].jointtype = 1;
                                            vinfos[5].foffset = j5;
                                            vinfos[5].indices[0] = _ij5[0];
                                            vinfos[5].indices[1] = _ij5[1];
                                            vinfos[5].maxsolutions = _nj5;
                                            std::vector<int> vfree(0);
                                            solutions.AddSolution(vinfos,
                                                                  vfree);
                                          }
                                        }
                                      }

                                    } else {
                                      IkReal x181 = ((new_r12) * (sj3));
                                      IkReal x182 =
                                          ((IkReal(1.00000000000000)) *
                                           (new_r02));
                                      IkReal x183 =
                                          ((((cj3) * (new_r12))) +
                                           (((IkReal(-1.00000000000000)) *
                                             (sj3) * (x182))));
                                      evalcond[0] =
                                          ((IkReal(-3.14159265358979)) +
                                           (IKfmod(
                                               ((IkReal(1.11022302462516e-16)) +
                                                (j4)),
                                               IkReal(6.28318530717959))));
                                      evalcond[1] =
                                          ((IkReal(1.00000000000000)) +
                                           (new_r22));
                                      evalcond[2] = new_r20;
                                      evalcond[3] = new_r21;
                                      evalcond[4] = x183;
                                      evalcond[5] = x183;
                                      evalcond[6] =
                                          ((x181) + (((cj3) * (new_r02))));
                                      evalcond[7] =
                                          ((IkReal(-1.00000000000000)) *
                                           (new_r20));
                                      evalcond[8] =
                                          ((IkReal(-1.00000000000000)) *
                                           (new_r21));
                                      evalcond[9] =
                                          ((IkReal(-1.00000000000000)) +
                                           (((IkReal(-1.00000000000000)) *
                                             (new_r22))));
                                      evalcond[10] =
                                          ((((IkReal(-1.00000000000000)) *
                                             (x181))) +
                                           (((IkReal(-1.00000000000000)) *
                                             (cj3) * (x182))));
                                      if (IKabs(evalcond[0]) <
                                              0.0000010000000000 &&
                                          IKabs(evalcond[1]) <
                                              0.0000010000000000 &&
                                          IKabs(evalcond[2]) <
                                              0.0000010000000000 &&
                                          IKabs(evalcond[3]) <
                                              0.0000010000000000 &&
                                          IKabs(evalcond[4]) <
                                              0.0000010000000000 &&
                                          IKabs(evalcond[5]) <
                                              0.0000010000000000 &&
                                          IKabs(evalcond[6]) <
                                              0.0000010000000000 &&
                                          IKabs(evalcond[7]) <
                                              0.0000010000000000 &&
                                          IKabs(evalcond[8]) <
                                              0.0000010000000000 &&
                                          IKabs(evalcond[9]) <
                                              0.0000010000000000 &&
                                          IKabs(evalcond[10]) <
                                              0.0000010000000000) {
                                        {
                                          IkReal j5array[1], cj5array[1],
                                              sj5array[1];
                                          bool j5valid[1] = {false};
                                          _nj5 = 1;
                                          if (IKabs(((((new_r11) * (sj3))) +
                                                     (((cj3) * (new_r01))))) <
                                                  IKFAST_ATAN2_MAGTHRESH &&
                                              IKabs(((((IkReal(
                                                           -1.00000000000000)) *
                                                       (cj3) * (new_r00))) +
                                                     (((IkReal(
                                                           -1.00000000000000)) *
                                                       (new_r10) * (sj3))))) <
                                                  IKFAST_ATAN2_MAGTHRESH &&
                                              IKabs(
                                                  IKsqr(
                                                      ((((new_r11) * (sj3))) +
                                                       (((cj3) * (new_r01))))) +
                                                  IKsqr((
                                                      (((IkReal(
                                                            -1.00000000000000)) *
                                                        (cj3) * (new_r00))) +
                                                      (((IkReal(
                                                            -1.00000000000000)) *
                                                        (new_r10) * (sj3))))) -
                                                  1) <= IKFAST_SINCOS_THRESH)
                                            continue;
                                          j5array[0] = IKatan2(
                                              ((((new_r11) * (sj3))) +
                                               (((cj3) * (new_r01)))),
                                              ((((IkReal(-1.00000000000000)) *
                                                 (cj3) * (new_r00))) +
                                               (((IkReal(-1.00000000000000)) *
                                                 (new_r10) * (sj3)))));
                                          sj5array[0] = IKsin(j5array[0]);
                                          cj5array[0] = IKcos(j5array[0]);
                                          if (j5array[0] > IKPI) {
                                            j5array[0] -= IK2PI;
                                          } else if (j5array[0] < -IKPI) {
                                            j5array[0] += IK2PI;
                                          }
                                          j5valid[0] = true;
                                          for (int ij5 = 0; ij5 < 1; ++ij5) {
                                            if (!j5valid[ij5]) {
                                              continue;
                                            }
                                            _ij5[0] = ij5;
                                            _ij5[1] = -1;
                                            for (int iij5 = ij5 + 1; iij5 < 1;
                                                 ++iij5) {
                                              if (j5valid[iij5] &&
                                                  IKabs(cj5array[ij5] -
                                                        cj5array[iij5]) <
                                                      IKFAST_SOLUTION_THRESH &&
                                                  IKabs(sj5array[ij5] -
                                                        sj5array[iij5]) <
                                                      IKFAST_SOLUTION_THRESH) {
                                                j5valid[iij5] = false;
                                                _ij5[1] = iij5;
                                                break;
                                              }
                                            }
                                            j5 = j5array[ij5];
                                            cj5 = cj5array[ij5];
                                            sj5 = sj5array[ij5];
                                            {
                                              IkReal evalcond[4];
                                              IkReal x184 = IKcos(j5);
                                              IkReal x185 =
                                                  ((IkReal(1.00000000000000)) *
                                                   (sj3));
                                              IkReal x186 =
                                                  ((IkReal(1.00000000000000)) *
                                                   (IKsin(j5)));
                                              evalcond[0] =
                                                  ((((IkReal(
                                                         -1.00000000000000)) *
                                                     (x186))) +
                                                   (((cj3) * (new_r10))) +
                                                   (((IkReal(
                                                         -1.00000000000000)) *
                                                     (new_r00) * (x185))));
                                              evalcond[1] =
                                                  ((((IkReal(
                                                         -1.00000000000000)) *
                                                     (x184))) +
                                                   (((IkReal(
                                                         -1.00000000000000)) *
                                                     (new_r01) * (x185))) +
                                                   (((cj3) * (new_r11))));
                                              evalcond[2] =
                                                  ((((new_r11) * (sj3))) +
                                                   (((IkReal(
                                                         -1.00000000000000)) *
                                                     (x186))) +
                                                   (((cj3) * (new_r01))));
                                              evalcond[3] =
                                                  ((((new_r10) * (sj3))) +
                                                   (x184) +
                                                   (((cj3) * (new_r00))));
                                              if (IKabs(evalcond[0]) >
                                                      0.000001 ||
                                                  IKabs(evalcond[1]) >
                                                      0.000001 ||
                                                  IKabs(evalcond[2]) >
                                                      0.000001 ||
                                                  IKabs(evalcond[3]) >
                                                      0.000001) {
                                                continue;
                                              }
                                            }

                                            {
                                              std::vector<
                                                  IkSingleDOFSolutionBase<
                                                      IkReal>>
                                                  vinfos(6);
                                              vinfos[0].jointtype = 1;
                                              vinfos[0].foffset = j0;
                                              vinfos[0].indices[0] = _ij0[0];
                                              vinfos[0].indices[1] = _ij0[1];
                                              vinfos[0].maxsolutions = _nj0;
                                              vinfos[1].jointtype = 1;
                                              vinfos[1].foffset = j1;
                                              vinfos[1].indices[0] = _ij1[0];
                                              vinfos[1].indices[1] = _ij1[1];
                                              vinfos[1].maxsolutions = _nj1;
                                              vinfos[2].jointtype = 1;
                                              vinfos[2].foffset = j2;
                                              vinfos[2].indices[0] = _ij2[0];
                                              vinfos[2].indices[1] = _ij2[1];
                                              vinfos[2].maxsolutions = _nj2;
                                              vinfos[3].jointtype = 1;
                                              vinfos[3].foffset = j3;
                                              vinfos[3].indices[0] = _ij3[0];
                                              vinfos[3].indices[1] = _ij3[1];
                                              vinfos[3].maxsolutions = _nj3;
                                              vinfos[4].jointtype = 1;
                                              vinfos[4].foffset = j4;
                                              vinfos[4].indices[0] = _ij4[0];
                                              vinfos[4].indices[1] = _ij4[1];
                                              vinfos[4].maxsolutions = _nj4;
                                              vinfos[5].jointtype = 1;
                                              vinfos[5].foffset = j5;
                                              vinfos[5].indices[0] = _ij5[0];
                                              vinfos[5].indices[1] = _ij5[1];
                                              vinfos[5].maxsolutions = _nj5;
                                              std::vector<int> vfree(0);
                                              solutions.AddSolution(vinfos,
                                                                    vfree);
                                            }
                                          }
                                        }

                                      } else {
                                        if (1) {
                                          continue;

                                        } else {
                                        }
                                      }
                                    }
                                  }

                                } else {
                                  {
                                    IkReal j5array[1], cj5array[1], sj5array[1];
                                    bool j5valid[1] = {false};
                                    _nj5 = 1;
                                    if (IKabs(((((cj3) * (new_r10))) +
                                               (((IkReal(-1.00000000000000)) *
                                                 (new_r00) * (sj3))))) <
                                            IKFAST_ATAN2_MAGTHRESH &&
                                        IKabs(((IkReal(-1.00000000000000)) *
                                               (new_r20) *
                                               (((IKabs(sj4) != 0)
                                                     ? ((IkReal)1 / (sj4))
                                                     : (IkReal)1.0e30)))) <
                                            IKFAST_ATAN2_MAGTHRESH &&
                                        IKabs(
                                            IKsqr(
                                                ((((cj3) * (new_r10))) +
                                                 (((IkReal(-1.00000000000000)) *
                                                   (new_r00) * (sj3))))) +
                                            IKsqr(((IkReal(-1.00000000000000)) *
                                                   (new_r20) *
                                                   (((IKabs(sj4) != 0)
                                                         ? ((IkReal)1 / (sj4))
                                                         : (IkReal)1.0e30)))) -
                                            1) <= IKFAST_SINCOS_THRESH)
                                      continue;
                                    j5array[0] = IKatan2(
                                        ((((cj3) * (new_r10))) +
                                         (((IkReal(-1.00000000000000)) *
                                           (new_r00) * (sj3)))),
                                        ((IkReal(-1.00000000000000)) *
                                         (new_r20) * (((IKabs(sj4) != 0)
                                                           ? ((IkReal)1 / (sj4))
                                                           : (IkReal)1.0e30))));
                                    sj5array[0] = IKsin(j5array[0]);
                                    cj5array[0] = IKcos(j5array[0]);
                                    if (j5array[0] > IKPI) {
                                      j5array[0] -= IK2PI;
                                    } else if (j5array[0] < -IKPI) {
                                      j5array[0] += IK2PI;
                                    }
                                    j5valid[0] = true;
                                    for (int ij5 = 0; ij5 < 1; ++ij5) {
                                      if (!j5valid[ij5]) {
                                        continue;
                                      }
                                      _ij5[0] = ij5;
                                      _ij5[1] = -1;
                                      for (int iij5 = ij5 + 1; iij5 < 1;
                                           ++iij5) {
                                        if (j5valid[iij5] &&
                                            IKabs(cj5array[ij5] -
                                                  cj5array[iij5]) <
                                                IKFAST_SOLUTION_THRESH &&
                                            IKabs(sj5array[ij5] -
                                                  sj5array[iij5]) <
                                                IKFAST_SOLUTION_THRESH) {
                                          j5valid[iij5] = false;
                                          _ij5[1] = iij5;
                                          break;
                                        }
                                      }
                                      j5 = j5array[ij5];
                                      cj5 = cj5array[ij5];
                                      sj5 = sj5array[ij5];
                                      {
                                        IkReal evalcond[8];
                                        IkReal x187 = IKsin(j5);
                                        IkReal x188 = IKcos(j5);
                                        IkReal x189 =
                                            ((IkReal(1.00000000000000)) *
                                             (sj3));
                                        IkReal x190 = ((new_r11) * (sj3));
                                        IkReal x191 = ((new_r10) * (sj3));
                                        IkReal x192 = ((cj3) * (cj4));
                                        IkReal x193 =
                                            ((IkReal(1.00000000000000)) *
                                             (sj4));
                                        IkReal x194 =
                                            ((IkReal(1.00000000000000)) *
                                             (x188));
                                        IkReal x195 =
                                            ((IkReal(1.00000000000000)) *
                                             (x187));
                                        evalcond[0] =
                                            ((((sj4) * (x188))) + (new_r20));
                                        evalcond[1] =
                                            ((((IkReal(-1.00000000000000)) *
                                               (x187) * (x193))) +
                                             (new_r21));
                                        evalcond[2] =
                                            ((((IkReal(-1.00000000000000)) *
                                               (x195))) +
                                             (((cj3) * (new_r10))) +
                                             (((IkReal(-1.00000000000000)) *
                                               (new_r00) * (x189))));
                                        evalcond[3] =
                                            ((((IkReal(-1.00000000000000)) *
                                               (x194))) +
                                             (((IkReal(-1.00000000000000)) *
                                               (new_r01) * (x189))) +
                                             (((cj3) * (new_r11))));
                                        evalcond[4] =
                                            ((x190) + (((cj3) * (new_r01))) +
                                             (((cj4) * (x187))));
                                        evalcond[5] =
                                            ((((IkReal(-1.00000000000000)) *
                                               (cj4) * (x194))) +
                                             (x191) + (((cj3) * (new_r00))));
                                        evalcond[6] =
                                            ((((cj4) * (x190))) +
                                             (((new_r01) * (x192))) +
                                             (((IkReal(-1.00000000000000)) *
                                               (new_r21) * (x193))) +
                                             (x187));
                                        evalcond[7] =
                                            ((((cj4) * (x191))) +
                                             (((new_r00) * (x192))) +
                                             (((IkReal(-1.00000000000000)) *
                                               (x194))) +
                                             (((IkReal(-1.00000000000000)) *
                                               (new_r20) * (x193))));
                                        if (IKabs(evalcond[0]) > 0.000001 ||
                                            IKabs(evalcond[1]) > 0.000001 ||
                                            IKabs(evalcond[2]) > 0.000001 ||
                                            IKabs(evalcond[3]) > 0.000001 ||
                                            IKabs(evalcond[4]) > 0.000001 ||
                                            IKabs(evalcond[5]) > 0.000001 ||
                                            IKabs(evalcond[6]) > 0.000001 ||
                                            IKabs(evalcond[7]) > 0.000001) {
                                          continue;
                                        }
                                      }

                                      {
                                        std::vector<
                                            IkSingleDOFSolutionBase<IkReal>>
                                            vinfos(6);
                                        vinfos[0].jointtype = 1;
                                        vinfos[0].foffset = j0;
                                        vinfos[0].indices[0] = _ij0[0];
                                        vinfos[0].indices[1] = _ij0[1];
                                        vinfos[0].maxsolutions = _nj0;
                                        vinfos[1].jointtype = 1;
                                        vinfos[1].foffset = j1;
                                        vinfos[1].indices[0] = _ij1[0];
                                        vinfos[1].indices[1] = _ij1[1];
                                        vinfos[1].maxsolutions = _nj1;
                                        vinfos[2].jointtype = 1;
                                        vinfos[2].foffset = j2;
                                        vinfos[2].indices[0] = _ij2[0];
                                        vinfos[2].indices[1] = _ij2[1];
                                        vinfos[2].maxsolutions = _nj2;
                                        vinfos[3].jointtype = 1;
                                        vinfos[3].foffset = j3;
                                        vinfos[3].indices[0] = _ij3[0];
                                        vinfos[3].indices[1] = _ij3[1];
                                        vinfos[3].maxsolutions = _nj3;
                                        vinfos[4].jointtype = 1;
                                        vinfos[4].foffset = j4;
                                        vinfos[4].indices[0] = _ij4[0];
                                        vinfos[4].indices[1] = _ij4[1];
                                        vinfos[4].maxsolutions = _nj4;
                                        vinfos[5].jointtype = 1;
                                        vinfos[5].foffset = j5;
                                        vinfos[5].indices[0] = _ij5[0];
                                        vinfos[5].indices[1] = _ij5[1];
                                        vinfos[5].maxsolutions = _nj5;
                                        std::vector<int> vfree(0);
                                        solutions.AddSolution(vinfos, vfree);
                                      }
                                    }
                                  }
                                }
                              }

                            } else {
                              {
                                IkReal j5array[1], cj5array[1], sj5array[1];
                                bool j5valid[1] = {false};
                                _nj5 = 1;
                                if (IKabs(((new_r21) *
                                           (((IKabs(sj4) != 0)
                                                 ? ((IkReal)1 / (sj4))
                                                 : (IkReal)1.0e30)))) <
                                        IKFAST_ATAN2_MAGTHRESH &&
                                    IKabs(((((IkReal(-1.00000000000000)) *
                                             (new_r01) * (sj3))) +
                                           (((cj3) * (new_r11))))) <
                                        IKFAST_ATAN2_MAGTHRESH &&
                                    IKabs(IKsqr(((new_r21) *
                                                 (((IKabs(sj4) != 0)
                                                       ? ((IkReal)1 / (sj4))
                                                       : (IkReal)1.0e30)))) +
                                          IKsqr(((((IkReal(-1.00000000000000)) *
                                                   (new_r01) * (sj3))) +
                                                 (((cj3) * (new_r11))))) -
                                          1) <= IKFAST_SINCOS_THRESH)
                                  continue;
                                j5array[0] = IKatan2(
                                    ((new_r21) *
                                     (((IKabs(sj4) != 0) ? ((IkReal)1 / (sj4))
                                                         : (IkReal)1.0e30))),
                                    ((((IkReal(-1.00000000000000)) * (new_r01) *
                                       (sj3))) +
                                     (((cj3) * (new_r11)))));
                                sj5array[0] = IKsin(j5array[0]);
                                cj5array[0] = IKcos(j5array[0]);
                                if (j5array[0] > IKPI) {
                                  j5array[0] -= IK2PI;
                                } else if (j5array[0] < -IKPI) {
                                  j5array[0] += IK2PI;
                                }
                                j5valid[0] = true;
                                for (int ij5 = 0; ij5 < 1; ++ij5) {
                                  if (!j5valid[ij5]) {
                                    continue;
                                  }
                                  _ij5[0] = ij5;
                                  _ij5[1] = -1;
                                  for (int iij5 = ij5 + 1; iij5 < 1; ++iij5) {
                                    if (j5valid[iij5] &&
                                        IKabs(cj5array[ij5] - cj5array[iij5]) <
                                            IKFAST_SOLUTION_THRESH &&
                                        IKabs(sj5array[ij5] - sj5array[iij5]) <
                                            IKFAST_SOLUTION_THRESH) {
                                      j5valid[iij5] = false;
                                      _ij5[1] = iij5;
                                      break;
                                    }
                                  }
                                  j5 = j5array[ij5];
                                  cj5 = cj5array[ij5];
                                  sj5 = sj5array[ij5];
                                  {
                                    IkReal evalcond[8];
                                    IkReal x196 = IKsin(j5);
                                    IkReal x197 = IKcos(j5);
                                    IkReal x198 =
                                        ((IkReal(1.00000000000000)) * (sj3));
                                    IkReal x199 = ((new_r11) * (sj3));
                                    IkReal x200 = ((new_r10) * (sj3));
                                    IkReal x201 = ((cj3) * (cj4));
                                    IkReal x202 =
                                        ((IkReal(1.00000000000000)) * (sj4));
                                    IkReal x203 =
                                        ((IkReal(1.00000000000000)) * (x197));
                                    IkReal x204 =
                                        ((IkReal(1.00000000000000)) * (x196));
                                    evalcond[0] =
                                        ((((sj4) * (x197))) + (new_r20));
                                    evalcond[1] =
                                        ((new_r21) +
                                         (((IkReal(-1.00000000000000)) *
                                           (x196) * (x202))));
                                    evalcond[2] =
                                        ((((IkReal(-1.00000000000000)) *
                                           (x204))) +
                                         (((cj3) * (new_r10))) +
                                         (((IkReal(-1.00000000000000)) *
                                           (new_r00) * (x198))));
                                    evalcond[3] =
                                        ((((IkReal(-1.00000000000000)) *
                                           (x203))) +
                                         (((IkReal(-1.00000000000000)) *
                                           (new_r01) * (x198))) +
                                         (((cj3) * (new_r11))));
                                    evalcond[4] = ((((cj4) * (x196))) + (x199) +
                                                   (((cj3) * (new_r01))));
                                    evalcond[5] =
                                        ((((IkReal(-1.00000000000000)) * (cj4) *
                                           (x203))) +
                                         (x200) + (((cj3) * (new_r00))));
                                    evalcond[6] =
                                        ((((cj4) * (x199))) +
                                         (((IkReal(-1.00000000000000)) *
                                           (new_r21) * (x202))) +
                                         (((new_r01) * (x201))) + (x196));
                                    evalcond[7] =
                                        ((((new_r00) * (x201))) +
                                         (((IkReal(-1.00000000000000)) *
                                           (new_r20) * (x202))) +
                                         (((IkReal(-1.00000000000000)) *
                                           (x203))) +
                                         (((cj4) * (x200))));
                                    if (IKabs(evalcond[0]) > 0.000001 ||
                                        IKabs(evalcond[1]) > 0.000001 ||
                                        IKabs(evalcond[2]) > 0.000001 ||
                                        IKabs(evalcond[3]) > 0.000001 ||
                                        IKabs(evalcond[4]) > 0.000001 ||
                                        IKabs(evalcond[5]) > 0.000001 ||
                                        IKabs(evalcond[6]) > 0.000001 ||
                                        IKabs(evalcond[7]) > 0.000001) {
                                      continue;
                                    }
                                  }

                                  {
                                    std::vector<IkSingleDOFSolutionBase<IkReal>>
                                        vinfos(6);
                                    vinfos[0].jointtype = 1;
                                    vinfos[0].foffset = j0;
                                    vinfos[0].indices[0] = _ij0[0];
                                    vinfos[0].indices[1] = _ij0[1];
                                    vinfos[0].maxsolutions = _nj0;
                                    vinfos[1].jointtype = 1;
                                    vinfos[1].foffset = j1;
                                    vinfos[1].indices[0] = _ij1[0];
                                    vinfos[1].indices[1] = _ij1[1];
                                    vinfos[1].maxsolutions = _nj1;
                                    vinfos[2].jointtype = 1;
                                    vinfos[2].foffset = j2;
                                    vinfos[2].indices[0] = _ij2[0];
                                    vinfos[2].indices[1] = _ij2[1];
                                    vinfos[2].maxsolutions = _nj2;
                                    vinfos[3].jointtype = 1;
                                    vinfos[3].foffset = j3;
                                    vinfos[3].indices[0] = _ij3[0];
                                    vinfos[3].indices[1] = _ij3[1];
                                    vinfos[3].maxsolutions = _nj3;
                                    vinfos[4].jointtype = 1;
                                    vinfos[4].foffset = j4;
                                    vinfos[4].indices[0] = _ij4[0];
                                    vinfos[4].indices[1] = _ij4[1];
                                    vinfos[4].maxsolutions = _nj4;
                                    vinfos[5].jointtype = 1;
                                    vinfos[5].foffset = j5;
                                    vinfos[5].indices[0] = _ij5[0];
                                    vinfos[5].indices[1] = _ij5[1];
                                    vinfos[5].maxsolutions = _nj5;
                                    std::vector<int> vfree(0);
                                    solutions.AddSolution(vinfos, vfree);
                                  }
                                }
                              }
                            }
                          }

                        } else {
                          {
                            IkReal j5array[1], cj5array[1], sj5array[1];
                            bool j5valid[1] = {false};
                            _nj5 = 1;
                            if (IKabs(((gconst5) * (new_r21))) <
                                    IKFAST_ATAN2_MAGTHRESH &&
                                IKabs(((IkReal(-1.00000000000000)) * (gconst5) *
                                       (new_r20))) < IKFAST_ATAN2_MAGTHRESH)
                              continue;
                            j5array[0] = IKatan2(((gconst5) * (new_r21)),
                                                 ((IkReal(-1.00000000000000)) *
                                                  (gconst5) * (new_r20)));
                            sj5array[0] = IKsin(j5array[0]);
                            cj5array[0] = IKcos(j5array[0]);
                            if (j5array[0] > IKPI) {
                              j5array[0] -= IK2PI;
                            } else if (j5array[0] < -IKPI) {
                              j5array[0] += IK2PI;
                            }
                            j5valid[0] = true;
                            for (int ij5 = 0; ij5 < 1; ++ij5) {
                              if (!j5valid[ij5]) {
                                continue;
                              }
                              _ij5[0] = ij5;
                              _ij5[1] = -1;
                              for (int iij5 = ij5 + 1; iij5 < 1; ++iij5) {
                                if (j5valid[iij5] &&
                                    IKabs(cj5array[ij5] - cj5array[iij5]) <
                                        IKFAST_SOLUTION_THRESH &&
                                    IKabs(sj5array[ij5] - sj5array[iij5]) <
                                        IKFAST_SOLUTION_THRESH) {
                                  j5valid[iij5] = false;
                                  _ij5[1] = iij5;
                                  break;
                                }
                              }
                              j5 = j5array[ij5];
                              cj5 = cj5array[ij5];
                              sj5 = sj5array[ij5];
                              {
                                IkReal evalcond[8];
                                IkReal x205 = IKsin(j5);
                                IkReal x206 = IKcos(j5);
                                IkReal x207 =
                                    ((IkReal(1.00000000000000)) * (sj3));
                                IkReal x208 = ((new_r11) * (sj3));
                                IkReal x209 = ((new_r10) * (sj3));
                                IkReal x210 = ((cj3) * (cj4));
                                IkReal x211 =
                                    ((IkReal(1.00000000000000)) * (sj4));
                                IkReal x212 =
                                    ((IkReal(1.00000000000000)) * (x206));
                                IkReal x213 =
                                    ((IkReal(1.00000000000000)) * (x205));
                                evalcond[0] = ((((sj4) * (x206))) + (new_r20));
                                evalcond[1] = ((((IkReal(-1.00000000000000)) *
                                                 (x205) * (x211))) +
                                               (new_r21));
                                evalcond[2] =
                                    ((((IkReal(-1.00000000000000)) * (new_r00) *
                                       (x207))) +
                                     (((cj3) * (new_r10))) +
                                     (((IkReal(-1.00000000000000)) * (x213))));
                                evalcond[3] =
                                    ((((cj3) * (new_r11))) +
                                     (((IkReal(-1.00000000000000)) * (x212))) +
                                     (((IkReal(-1.00000000000000)) * (new_r01) *
                                       (x207))));
                                evalcond[4] = ((((cj4) * (x205))) + (x208) +
                                               (((cj3) * (new_r01))));
                                evalcond[5] =
                                    ((x209) + (((IkReal(-1.00000000000000)) *
                                                (cj4) * (x212))) +
                                     (((cj3) * (new_r00))));
                                evalcond[6] = ((((cj4) * (x208))) + (x205) +
                                               (((IkReal(-1.00000000000000)) *
                                                 (new_r21) * (x211))) +
                                               (((new_r01) * (x210))));
                                evalcond[7] =
                                    ((((cj4) * (x209))) +
                                     (((new_r00) * (x210))) +
                                     (((IkReal(-1.00000000000000)) * (new_r20) *
                                       (x211))) +
                                     (((IkReal(-1.00000000000000)) * (x212))));
                                if (IKabs(evalcond[0]) > 0.000001 ||
                                    IKabs(evalcond[1]) > 0.000001 ||
                                    IKabs(evalcond[2]) > 0.000001 ||
                                    IKabs(evalcond[3]) > 0.000001 ||
                                    IKabs(evalcond[4]) > 0.000001 ||
                                    IKabs(evalcond[5]) > 0.000001 ||
                                    IKabs(evalcond[6]) > 0.000001 ||
                                    IKabs(evalcond[7]) > 0.000001) {
                                  continue;
                                }
                              }

                              {
                                std::vector<IkSingleDOFSolutionBase<IkReal>>
                                    vinfos(6);
                                vinfos[0].jointtype = 1;
                                vinfos[0].foffset = j0;
                                vinfos[0].indices[0] = _ij0[0];
                                vinfos[0].indices[1] = _ij0[1];
                                vinfos[0].maxsolutions = _nj0;
                                vinfos[1].jointtype = 1;
                                vinfos[1].foffset = j1;
                                vinfos[1].indices[0] = _ij1[0];
                                vinfos[1].indices[1] = _ij1[1];
                                vinfos[1].maxsolutions = _nj1;
                                vinfos[2].jointtype = 1;
                                vinfos[2].foffset = j2;
                                vinfos[2].indices[0] = _ij2[0];
                                vinfos[2].indices[1] = _ij2[1];
                                vinfos[2].maxsolutions = _nj2;
                                vinfos[3].jointtype = 1;
                                vinfos[3].foffset = j3;
                                vinfos[3].indices[0] = _ij3[0];
                                vinfos[3].indices[1] = _ij3[1];
                                vinfos[3].maxsolutions = _nj3;
                                vinfos[4].jointtype = 1;
                                vinfos[4].foffset = j4;
                                vinfos[4].indices[0] = _ij4[0];
                                vinfos[4].indices[1] = _ij4[1];
                                vinfos[4].maxsolutions = _nj4;
                                vinfos[5].jointtype = 1;
                                vinfos[5].foffset = j5;
                                vinfos[5].indices[0] = _ij5[0];
                                vinfos[5].indices[1] = _ij5[1];
                                vinfos[5].maxsolutions = _nj5;
                                std::vector<int> vfree(0);
                                solutions.AddSolution(vinfos, vfree);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }

            } else {
              {
                IkReal j5array[1], cj5array[1], sj5array[1];
                bool j5valid[1] = {false};
                _nj5 = 1;
                if (IKabs(((gconst4) * (new_r21))) < IKFAST_ATAN2_MAGTHRESH &&
                    IKabs(((IkReal(-1.00000000000000)) * (gconst4) *
                           (new_r20))) < IKFAST_ATAN2_MAGTHRESH)
                  continue;
                j5array[0] = IKatan2(
                    ((gconst4) * (new_r21)),
                    ((IkReal(-1.00000000000000)) * (gconst4) * (new_r20)));
                sj5array[0] = IKsin(j5array[0]);
                cj5array[0] = IKcos(j5array[0]);
                if (j5array[0] > IKPI) {
                  j5array[0] -= IK2PI;
                } else if (j5array[0] < -IKPI) {
                  j5array[0] += IK2PI;
                }
                j5valid[0] = true;
                for (int ij5 = 0; ij5 < 1; ++ij5) {
                  if (!j5valid[ij5]) {
                    continue;
                  }
                  _ij5[0] = ij5;
                  _ij5[1] = -1;
                  for (int iij5 = ij5 + 1; iij5 < 1; ++iij5) {
                    if (j5valid[iij5] &&
                        IKabs(cj5array[ij5] - cj5array[iij5]) <
                            IKFAST_SOLUTION_THRESH &&
                        IKabs(sj5array[ij5] - sj5array[iij5]) <
                            IKFAST_SOLUTION_THRESH) {
                      j5valid[iij5] = false;
                      _ij5[1] = iij5;
                      break;
                    }
                  }
                  j5 = j5array[ij5];
                  cj5 = cj5array[ij5];
                  sj5 = sj5array[ij5];
                  {
                    IkReal evalcond[2];
                    evalcond[0] = ((((sj4) * (IKcos(j5)))) + (new_r20));
                    evalcond[1] =
                        ((((IkReal(-1.00000000000000)) * (sj4) * (IKsin(j5)))) +
                         (new_r21));
                    if (IKabs(evalcond[0]) > 0.000001 ||
                        IKabs(evalcond[1]) > 0.000001) {
                      continue;
                    }
                  }

                  {
                    IkReal dummyeval[1];
                    IkReal gconst6;
                    gconst6 = IKsign(
                        (((new_r12) * (new_r12)) + ((new_r02) * (new_r02))));
                    dummyeval[0] =
                        (((new_r12) * (new_r12)) + ((new_r02) * (new_r02)));
                    if (IKabs(dummyeval[0]) < 0.0000010000000000) {
                      {
                        IkReal dummyeval[1];
                        IkReal gconst7;
                        gconst7 = IKsign(((((IkReal(-1.00000000000000)) *
                                            (new_r11) * (new_r12))) +
                                          (((IkReal(-1.00000000000000)) *
                                            (new_r01) * (new_r02)))));
                        dummyeval[0] = ((((IkReal(-1.00000000000000)) *
                                          (new_r11) * (new_r12))) +
                                        (((IkReal(-1.00000000000000)) *
                                          (new_r01) * (new_r02))));
                        if (IKabs(dummyeval[0]) < 0.0000010000000000) {
                          continue;

                        } else {
                          {
                            IkReal j3array[1], cj3array[1], sj3array[1];
                            bool j3valid[1] = {false};
                            _nj3 = 1;
                            IkReal x214 = ((cj4) * (gconst7) * (sj5));
                            if (IKabs(((new_r12) * (x214))) <
                                    IKFAST_ATAN2_MAGTHRESH &&
                                IKabs(((new_r02) * (x214))) <
                                    IKFAST_ATAN2_MAGTHRESH)
                              continue;
                            j3array[0] = IKatan2(((new_r12) * (x214)),
                                                 ((new_r02) * (x214)));
                            sj3array[0] = IKsin(j3array[0]);
                            cj3array[0] = IKcos(j3array[0]);
                            if (j3array[0] > IKPI) {
                              j3array[0] -= IK2PI;
                            } else if (j3array[0] < -IKPI) {
                              j3array[0] += IK2PI;
                            }
                            j3valid[0] = true;
                            for (int ij3 = 0; ij3 < 1; ++ij3) {
                              if (!j3valid[ij3]) {
                                continue;
                              }
                              _ij3[0] = ij3;
                              _ij3[1] = -1;
                              for (int iij3 = ij3 + 1; iij3 < 1; ++iij3) {
                                if (j3valid[iij3] &&
                                    IKabs(cj3array[ij3] - cj3array[iij3]) <
                                        IKFAST_SOLUTION_THRESH &&
                                    IKabs(sj3array[ij3] - sj3array[iij3]) <
                                        IKFAST_SOLUTION_THRESH) {
                                  j3valid[iij3] = false;
                                  _ij3[1] = iij3;
                                  break;
                                }
                              }
                              j3 = j3array[ij3];
                              cj3 = cj3array[ij3];
                              sj3 = sj3array[ij3];
                              {
                                IkReal evalcond[12];
                                IkReal x215 = IKsin(j3);
                                IkReal x216 = IKcos(j3);
                                IkReal x217 =
                                    ((IkReal(1.00000000000000)) * (cj5));
                                IkReal x218 =
                                    ((IkReal(1.00000000000000)) * (sj4));
                                IkReal x219 = ((cj4) * (x216));
                                IkReal x220 = ((sj4) * (x216));
                                IkReal x221 = ((cj4) * (x215));
                                IkReal x222 = ((new_r11) * (x215));
                                IkReal x223 = ((sj4) * (x215));
                                IkReal x224 =
                                    ((IkReal(1.00000000000000)) * (x215));
                                evalcond[0] = ((((IkReal(-1.00000000000000)) *
                                                 (new_r02) * (x224))) +
                                               (((new_r12) * (x216))));
                                evalcond[1] =
                                    ((((new_r02) * (x216))) +
                                     (((IkReal(-1.00000000000000)) * (x218))) +
                                     (((new_r12) * (x215))));
                                evalcond[2] =
                                    ((((IkReal(-1.00000000000000)) * (sj5))) +
                                     (((new_r10) * (x216))) +
                                     (((IkReal(-1.00000000000000)) * (new_r00) *
                                       (x224))));
                                evalcond[3] =
                                    ((((IkReal(-1.00000000000000)) * (new_r01) *
                                       (x224))) +
                                     (((IkReal(-1.00000000000000)) * (x217))) +
                                     (((new_r11) * (x216))));
                                evalcond[4] = ((((cj4) * (sj5))) + (x222) +
                                               (((new_r01) * (x216))));
                                evalcond[5] = ((((IkReal(-1.00000000000000)) *
                                                 (cj4) * (x217))) +
                                               (((new_r00) * (x216))) +
                                               (((new_r10) * (x215))));
                                evalcond[6] = ((((new_r00) * (x220))) +
                                               (((cj4) * (new_r20))) +
                                               (((new_r10) * (x223))));
                                evalcond[7] = ((((sj4) * (x222))) +
                                               (((new_r01) * (x220))) +
                                               (((cj4) * (new_r21))));
                                evalcond[8] = ((IkReal(-1.00000000000000)) +
                                               (((new_r02) * (x220))) +
                                               (((cj4) * (new_r22))) +
                                               (((new_r12) * (x223))));
                                evalcond[9] = ((((new_r12) * (x221))) +
                                               (((new_r02) * (x219))) +
                                               (((IkReal(-1.00000000000000)) *
                                                 (new_r22) * (x218))));
                                evalcond[10] =
                                    ((sj5) + (((IkReal(-1.00000000000000)) *
                                               (new_r21) * (x218))) +
                                     (((new_r11) * (x221))) +
                                     (((new_r01) * (x219))));
                                evalcond[11] =
                                    ((((new_r00) * (x219))) +
                                     (((IkReal(-1.00000000000000)) * (new_r20) *
                                       (x218))) +
                                     (((new_r10) * (x221))) +
                                     (((IkReal(-1.00000000000000)) * (x217))));
                                if (IKabs(evalcond[0]) > 0.000001 ||
                                    IKabs(evalcond[1]) > 0.000001 ||
                                    IKabs(evalcond[2]) > 0.000001 ||
                                    IKabs(evalcond[3]) > 0.000001 ||
                                    IKabs(evalcond[4]) > 0.000001 ||
                                    IKabs(evalcond[5]) > 0.000001 ||
                                    IKabs(evalcond[6]) > 0.000001 ||
                                    IKabs(evalcond[7]) > 0.000001 ||
                                    IKabs(evalcond[8]) > 0.000001 ||
                                    IKabs(evalcond[9]) > 0.000001 ||
                                    IKabs(evalcond[10]) > 0.000001 ||
                                    IKabs(evalcond[11]) > 0.000001) {
                                  continue;
                                }
                              }

                              {
                                std::vector<IkSingleDOFSolutionBase<IkReal>>
                                    vinfos(6);
                                vinfos[0].jointtype = 1;
                                vinfos[0].foffset = j0;
                                vinfos[0].indices[0] = _ij0[0];
                                vinfos[0].indices[1] = _ij0[1];
                                vinfos[0].maxsolutions = _nj0;
                                vinfos[1].jointtype = 1;
                                vinfos[1].foffset = j1;
                                vinfos[1].indices[0] = _ij1[0];
                                vinfos[1].indices[1] = _ij1[1];
                                vinfos[1].maxsolutions = _nj1;
                                vinfos[2].jointtype = 1;
                                vinfos[2].foffset = j2;
                                vinfos[2].indices[0] = _ij2[0];
                                vinfos[2].indices[1] = _ij2[1];
                                vinfos[2].maxsolutions = _nj2;
                                vinfos[3].jointtype = 1;
                                vinfos[3].foffset = j3;
                                vinfos[3].indices[0] = _ij3[0];
                                vinfos[3].indices[1] = _ij3[1];
                                vinfos[3].maxsolutions = _nj3;
                                vinfos[4].jointtype = 1;
                                vinfos[4].foffset = j4;
                                vinfos[4].indices[0] = _ij4[0];
                                vinfos[4].indices[1] = _ij4[1];
                                vinfos[4].maxsolutions = _nj4;
                                vinfos[5].jointtype = 1;
                                vinfos[5].foffset = j5;
                                vinfos[5].indices[0] = _ij5[0];
                                vinfos[5].indices[1] = _ij5[1];
                                vinfos[5].maxsolutions = _nj5;
                                std::vector<int> vfree(0);
                                solutions.AddSolution(vinfos, vfree);
                              }
                            }
                          }
                        }
                      }

                    } else {
                      {
                        IkReal j3array[1], cj3array[1], sj3array[1];
                        bool j3valid[1] = {false};
                        _nj3 = 1;
                        IkReal x225 = ((gconst6) * (sj4));
                        if (IKabs(((new_r12) * (x225))) <
                                IKFAST_ATAN2_MAGTHRESH &&
                            IKabs(((new_r02) * (x225))) <
                                IKFAST_ATAN2_MAGTHRESH)
                          continue;
                        j3array[0] =
                            IKatan2(((new_r12) * (x225)), ((new_r02) * (x225)));
                        sj3array[0] = IKsin(j3array[0]);
                        cj3array[0] = IKcos(j3array[0]);
                        if (j3array[0] > IKPI) {
                          j3array[0] -= IK2PI;
                        } else if (j3array[0] < -IKPI) {
                          j3array[0] += IK2PI;
                        }
                        j3valid[0] = true;
                        for (int ij3 = 0; ij3 < 1; ++ij3) {
                          if (!j3valid[ij3]) {
                            continue;
                          }
                          _ij3[0] = ij3;
                          _ij3[1] = -1;
                          for (int iij3 = ij3 + 1; iij3 < 1; ++iij3) {
                            if (j3valid[iij3] &&
                                IKabs(cj3array[ij3] - cj3array[iij3]) <
                                    IKFAST_SOLUTION_THRESH &&
                                IKabs(sj3array[ij3] - sj3array[iij3]) <
                                    IKFAST_SOLUTION_THRESH) {
                              j3valid[iij3] = false;
                              _ij3[1] = iij3;
                              break;
                            }
                          }
                          j3 = j3array[ij3];
                          cj3 = cj3array[ij3];
                          sj3 = sj3array[ij3];
                          {
                            IkReal evalcond[12];
                            IkReal x226 = IKsin(j3);
                            IkReal x227 = IKcos(j3);
                            IkReal x228 = ((IkReal(1.00000000000000)) * (cj5));
                            IkReal x229 = ((IkReal(1.00000000000000)) * (sj4));
                            IkReal x230 = ((cj4) * (x227));
                            IkReal x231 = ((sj4) * (x227));
                            IkReal x232 = ((cj4) * (x226));
                            IkReal x233 = ((new_r11) * (x226));
                            IkReal x234 = ((sj4) * (x226));
                            IkReal x235 = ((IkReal(1.00000000000000)) * (x226));
                            evalcond[0] = ((((IkReal(-1.00000000000000)) *
                                             (new_r02) * (x235))) +
                                           (((new_r12) * (x227))));
                            evalcond[1] =
                                ((((new_r02) * (x227))) +
                                 (((new_r12) * (x226))) +
                                 (((IkReal(-1.00000000000000)) * (x229))));
                            evalcond[2] =
                                ((((IkReal(-1.00000000000000)) * (sj5))) +
                                 (((new_r10) * (x227))) +
                                 (((IkReal(-1.00000000000000)) * (new_r00) *
                                   (x235))));
                            evalcond[3] =
                                ((((new_r11) * (x227))) +
                                 (((IkReal(-1.00000000000000)) * (new_r01) *
                                   (x235))) +
                                 (((IkReal(-1.00000000000000)) * (x228))));
                            evalcond[4] = ((((new_r01) * (x227))) +
                                           (((cj4) * (sj5))) + (x233));
                            evalcond[5] = ((((new_r00) * (x227))) +
                                           (((IkReal(-1.00000000000000)) *
                                             (cj4) * (x228))) +
                                           (((new_r10) * (x226))));
                            evalcond[6] = ((((new_r10) * (x234))) +
                                           (((cj4) * (new_r20))) +
                                           (((new_r00) * (x231))));
                            evalcond[7] =
                                ((((new_r01) * (x231))) +
                                 (((cj4) * (new_r21))) + (((sj4) * (x233))));
                            evalcond[8] = ((IkReal(-1.00000000000000)) +
                                           (((new_r02) * (x231))) +
                                           (((cj4) * (new_r22))) +
                                           (((new_r12) * (x234))));
                            evalcond[9] = ((((new_r02) * (x230))) +
                                           (((new_r12) * (x232))) +
                                           (((IkReal(-1.00000000000000)) *
                                             (new_r22) * (x229))));
                            evalcond[10] = ((sj5) + (((new_r11) * (x232))) +
                                            (((new_r01) * (x230))) +
                                            (((IkReal(-1.00000000000000)) *
                                              (new_r21) * (x229))));
                            evalcond[11] =
                                ((((new_r10) * (x232))) +
                                 (((new_r00) * (x230))) +
                                 (((IkReal(-1.00000000000000)) * (new_r20) *
                                   (x229))) +
                                 (((IkReal(-1.00000000000000)) * (x228))));
                            if (IKabs(evalcond[0]) > 0.000001 ||
                                IKabs(evalcond[1]) > 0.000001 ||
                                IKabs(evalcond[2]) > 0.000001 ||
                                IKabs(evalcond[3]) > 0.000001 ||
                                IKabs(evalcond[4]) > 0.000001 ||
                                IKabs(evalcond[5]) > 0.000001 ||
                                IKabs(evalcond[6]) > 0.000001 ||
                                IKabs(evalcond[7]) > 0.000001 ||
                                IKabs(evalcond[8]) > 0.000001 ||
                                IKabs(evalcond[9]) > 0.000001 ||
                                IKabs(evalcond[10]) > 0.000001 ||
                                IKabs(evalcond[11]) > 0.000001) {
                              continue;
                            }
                          }

                          {
                            std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(
                                6);
                            vinfos[0].jointtype = 1;
                            vinfos[0].foffset = j0;
                            vinfos[0].indices[0] = _ij0[0];
                            vinfos[0].indices[1] = _ij0[1];
                            vinfos[0].maxsolutions = _nj0;
                            vinfos[1].jointtype = 1;
                            vinfos[1].foffset = j1;
                            vinfos[1].indices[0] = _ij1[0];
                            vinfos[1].indices[1] = _ij1[1];
                            vinfos[1].maxsolutions = _nj1;
                            vinfos[2].jointtype = 1;
                            vinfos[2].foffset = j2;
                            vinfos[2].indices[0] = _ij2[0];
                            vinfos[2].indices[1] = _ij2[1];
                            vinfos[2].maxsolutions = _nj2;
                            vinfos[3].jointtype = 1;
                            vinfos[3].foffset = j3;
                            vinfos[3].indices[0] = _ij3[0];
                            vinfos[3].indices[1] = _ij3[1];
                            vinfos[3].maxsolutions = _nj3;
                            vinfos[4].jointtype = 1;
                            vinfos[4].foffset = j4;
                            vinfos[4].indices[0] = _ij4[0];
                            vinfos[4].indices[1] = _ij4[1];
                            vinfos[4].maxsolutions = _nj4;
                            vinfos[5].jointtype = 1;
                            vinfos[5].foffset = j5;
                            vinfos[5].indices[0] = _ij5[0];
                            vinfos[5].indices[1] = _ij5[1];
                            vinfos[5].maxsolutions = _nj5;
                            std::vector<int> vfree(0);
                            solutions.AddSolution(vinfos, vfree);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};

/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal *eetrans, const IkReal *eerot,
                          const IkReal *pfree,
                          IkSolutionListBase<IkReal> &solutions) {
  IKSolver solver;
  return solver.ComputeIk(eetrans, eerot, pfree, solutions);
}

IKFAST_API const char *GetKinematicsHash() {
  return "<robot:genericrobot - kuka_kr210 (328f5fa894ca1be3105acbe6b4ce997b)>";
}

IKFAST_API const char *GetIkFastVersion() {
  return IKFAST_STRINGIZE(IKFAST_VERSION);
}

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char **argv) {
  if (argc != 12 + GetNumFreeParameters() + 1) {
    printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 "
           "...\n\n"
           "Returns the ik solutions given the transformation of the end "
           "effector specified by\n"
           "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
           "There are %d free parameters that have to be specified.\n\n",
           GetNumFreeParameters());
    return 1;
  }

  IkSolutionList<IkReal> solutions;
  std::vector<IkReal> vfree(GetNumFreeParameters());
  IkReal eerot[9], eetrans[3];
  eerot[0] = atof(argv[1]);
  eerot[1] = atof(argv[2]);
  eerot[2] = atof(argv[3]);
  eetrans[0] = atof(argv[4]);
  eerot[3] = atof(argv[5]);
  eerot[4] = atof(argv[6]);
  eerot[5] = atof(argv[7]);
  eetrans[1] = atof(argv[8]);
  eerot[6] = atof(argv[9]);
  eerot[7] = atof(argv[10]);
  eerot[8] = atof(argv[11]);
  eetrans[2] = atof(argv[12]);
  for (std::size_t i = 0; i < vfree.size(); ++i)
    vfree[i] = atof(argv[13 + i]);
  bool bSuccess =
      ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

  if (!bSuccess) {
    fprintf(stderr, "Failed to get ik solution\n");
    return -1;
  }

  printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
  std::vector<IkReal> solvalues(GetNumJoints());
  for (std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
    const IkSolutionBase<IkReal> &sol = solutions.GetSolution(i);
    printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
    std::vector<IkReal> vsolfree(sol.GetFree().size());
    sol.GetSolution(&solvalues[0], vsolfree.size() > 0 ? &vsolfree[0] : NULL);
    for (std::size_t j = 0; j < solvalues.size(); ++j)
      printf("%.15f, ", solvalues[j]);
    printf("\n");
  }
  return 0;
}

#endif
